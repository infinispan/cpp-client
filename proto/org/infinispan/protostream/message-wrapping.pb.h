// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message-wrapping.proto

#ifndef PROTOBUF_message_2dwrapping_2eproto__INCLUDED
#define PROTOBUF_message_2dwrapping_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <infinispan/hotrod/ImportExport.h>

// @@protoc_insertion_point(includes)

namespace org {
namespace infinispan {
namespace protostream {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2dwrapping_2eproto();
void protobuf_AssignDesc_message_2dwrapping_2eproto();
void protobuf_ShutdownFile_message_2dwrapping_2eproto();

class HR_EXTERN WrappedMessage;

// ===================================================================

class WrappedMessage : public ::google::protobuf::Message {
 public:
  WrappedMessage();
  virtual ~WrappedMessage();

  WrappedMessage(const WrappedMessage& from);

  inline WrappedMessage& operator=(const WrappedMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WrappedMessage& default_instance();

  void Swap(WrappedMessage* other);

  // implements Message ----------------------------------------------

  WrappedMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WrappedMessage& from);
  void MergeFrom(const WrappedMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double wrappedDouble = 1;
  inline bool has_wrappeddouble() const;
  inline void clear_wrappeddouble();
  static const int kWrappedDoubleFieldNumber = 1;
  inline double wrappeddouble() const;
  inline void set_wrappeddouble(double value);

  // optional float wrappedFloat = 2;
  inline bool has_wrappedfloat() const;
  inline void clear_wrappedfloat();
  static const int kWrappedFloatFieldNumber = 2;
  inline float wrappedfloat() const;
  inline void set_wrappedfloat(float value);

  // optional int64 wrappedInt64 = 3;
  inline bool has_wrappedint64() const;
  inline void clear_wrappedint64();
  static const int kWrappedInt64FieldNumber = 3;
  inline ::google::protobuf::int64 wrappedint64() const;
  inline void set_wrappedint64(::google::protobuf::int64 value);

  // optional uint64 wrappedUInt64 = 4;
  inline bool has_wrappeduint64() const;
  inline void clear_wrappeduint64();
  static const int kWrappedUInt64FieldNumber = 4;
  inline ::google::protobuf::uint64 wrappeduint64() const;
  inline void set_wrappeduint64(::google::protobuf::uint64 value);

  // optional int32 wrappedInt32 = 5;
  inline bool has_wrappedint32() const;
  inline void clear_wrappedint32();
  static const int kWrappedInt32FieldNumber = 5;
  inline ::google::protobuf::int32 wrappedint32() const;
  inline void set_wrappedint32(::google::protobuf::int32 value);

  // optional fixed64 wrappedFixed64 = 6;
  inline bool has_wrappedfixed64() const;
  inline void clear_wrappedfixed64();
  static const int kWrappedFixed64FieldNumber = 6;
  inline ::google::protobuf::uint64 wrappedfixed64() const;
  inline void set_wrappedfixed64(::google::protobuf::uint64 value);

  // optional fixed32 wrappedFixed32 = 7;
  inline bool has_wrappedfixed32() const;
  inline void clear_wrappedfixed32();
  static const int kWrappedFixed32FieldNumber = 7;
  inline ::google::protobuf::uint32 wrappedfixed32() const;
  inline void set_wrappedfixed32(::google::protobuf::uint32 value);

  // optional bool wrappedBool = 8;
  inline bool has_wrappedbool() const;
  inline void clear_wrappedbool();
  static const int kWrappedBoolFieldNumber = 8;
  inline bool wrappedbool() const;
  inline void set_wrappedbool(bool value);

  // optional string wrappedString = 9;
  inline bool has_wrappedstring() const;
  inline void clear_wrappedstring();
  static const int kWrappedStringFieldNumber = 9;
  inline const ::std::string& wrappedstring() const;
  inline void set_wrappedstring(const ::std::string& value);
  inline void set_wrappedstring(const char* value);
  inline void set_wrappedstring(const char* value, size_t size);
  inline ::std::string* mutable_wrappedstring();
  inline ::std::string* release_wrappedstring();
  inline void set_allocated_wrappedstring(::std::string* wrappedstring);

  // optional bytes wrappedBytes = 10;
  inline bool has_wrappedbytes() const;
  inline void clear_wrappedbytes();
  static const int kWrappedBytesFieldNumber = 10;
  inline const ::std::string& wrappedbytes() const;
  inline void set_wrappedbytes(const ::std::string& value);
  inline void set_wrappedbytes(const char* value);
  inline void set_wrappedbytes(const void* value, size_t size);
  inline ::std::string* mutable_wrappedbytes();
  inline ::std::string* release_wrappedbytes();
  inline void set_allocated_wrappedbytes(::std::string* wrappedbytes);

  // optional uint32 wrappedUInt32 = 11;
  inline bool has_wrappeduint32() const;
  inline void clear_wrappeduint32();
  static const int kWrappedUInt32FieldNumber = 11;
  inline ::google::protobuf::uint32 wrappeduint32() const;
  inline void set_wrappeduint32(::google::protobuf::uint32 value);

  // optional sfixed32 wrappedSFixed32 = 12;
  inline bool has_wrappedsfixed32() const;
  inline void clear_wrappedsfixed32();
  static const int kWrappedSFixed32FieldNumber = 12;
  inline ::google::protobuf::int32 wrappedsfixed32() const;
  inline void set_wrappedsfixed32(::google::protobuf::int32 value);

  // optional sfixed64 wrappedSFixed64 = 13;
  inline bool has_wrappedsfixed64() const;
  inline void clear_wrappedsfixed64();
  static const int kWrappedSFixed64FieldNumber = 13;
  inline ::google::protobuf::int64 wrappedsfixed64() const;
  inline void set_wrappedsfixed64(::google::protobuf::int64 value);

  // optional sint32 wrappedSInt32 = 14;
  inline bool has_wrappedsint32() const;
  inline void clear_wrappedsint32();
  static const int kWrappedSInt32FieldNumber = 14;
  inline ::google::protobuf::int32 wrappedsint32() const;
  inline void set_wrappedsint32(::google::protobuf::int32 value);

  // optional sint64 wrappedSInt64 = 15;
  inline bool has_wrappedsint64() const;
  inline void clear_wrappedsint64();
  static const int kWrappedSInt64FieldNumber = 15;
  inline ::google::protobuf::int64 wrappedsint64() const;
  inline void set_wrappedsint64(::google::protobuf::int64 value);

  // optional string wrappedDescriptorFullName = 16;
  inline bool has_wrappeddescriptorfullname() const;
  inline void clear_wrappeddescriptorfullname();
  static const int kWrappedDescriptorFullNameFieldNumber = 16;
  inline const ::std::string& wrappeddescriptorfullname() const;
  inline void set_wrappeddescriptorfullname(const ::std::string& value);
  inline void set_wrappeddescriptorfullname(const char* value);
  inline void set_wrappeddescriptorfullname(const char* value, size_t size);
  inline ::std::string* mutable_wrappeddescriptorfullname();
  inline ::std::string* release_wrappeddescriptorfullname();
  inline void set_allocated_wrappeddescriptorfullname(::std::string* wrappeddescriptorfullname);

  // optional bytes wrappedMessageBytes = 17;
  inline bool has_wrappedmessagebytes() const;
  inline void clear_wrappedmessagebytes();
  static const int kWrappedMessageBytesFieldNumber = 17;
  inline const ::std::string& wrappedmessagebytes() const;
  inline void set_wrappedmessagebytes(const ::std::string& value);
  inline void set_wrappedmessagebytes(const char* value);
  inline void set_wrappedmessagebytes(const void* value, size_t size);
  inline ::std::string* mutable_wrappedmessagebytes();
  inline ::std::string* release_wrappedmessagebytes();
  inline void set_allocated_wrappedmessagebytes(::std::string* wrappedmessagebytes);

  // optional int32 wrappedEnum = 18;
  inline bool has_wrappedenum() const;
  inline void clear_wrappedenum();
  static const int kWrappedEnumFieldNumber = 18;
  inline ::google::protobuf::int32 wrappedenum() const;
  inline void set_wrappedenum(::google::protobuf::int32 value);

  // optional int32 wrappedDescriptorId = 19;
  inline bool has_wrappeddescriptorid() const;
  inline void clear_wrappeddescriptorid();
  static const int kWrappedDescriptorIdFieldNumber = 19;
  inline ::google::protobuf::int32 wrappeddescriptorid() const;
  inline void set_wrappeddescriptorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.infinispan.protostream.WrappedMessage)
 private:
  inline void set_has_wrappeddouble();
  inline void clear_has_wrappeddouble();
  inline void set_has_wrappedfloat();
  inline void clear_has_wrappedfloat();
  inline void set_has_wrappedint64();
  inline void clear_has_wrappedint64();
  inline void set_has_wrappeduint64();
  inline void clear_has_wrappeduint64();
  inline void set_has_wrappedint32();
  inline void clear_has_wrappedint32();
  inline void set_has_wrappedfixed64();
  inline void clear_has_wrappedfixed64();
  inline void set_has_wrappedfixed32();
  inline void clear_has_wrappedfixed32();
  inline void set_has_wrappedbool();
  inline void clear_has_wrappedbool();
  inline void set_has_wrappedstring();
  inline void clear_has_wrappedstring();
  inline void set_has_wrappedbytes();
  inline void clear_has_wrappedbytes();
  inline void set_has_wrappeduint32();
  inline void clear_has_wrappeduint32();
  inline void set_has_wrappedsfixed32();
  inline void clear_has_wrappedsfixed32();
  inline void set_has_wrappedsfixed64();
  inline void clear_has_wrappedsfixed64();
  inline void set_has_wrappedsint32();
  inline void clear_has_wrappedsint32();
  inline void set_has_wrappedsint64();
  inline void clear_has_wrappedsint64();
  inline void set_has_wrappeddescriptorfullname();
  inline void clear_has_wrappeddescriptorfullname();
  inline void set_has_wrappedmessagebytes();
  inline void clear_has_wrappedmessagebytes();
  inline void set_has_wrappedenum();
  inline void clear_has_wrappedenum();
  inline void set_has_wrappeddescriptorid();
  inline void clear_has_wrappeddescriptorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double wrappeddouble_;
  ::google::protobuf::int64 wrappedint64_;
  float wrappedfloat_;
  ::google::protobuf::int32 wrappedint32_;
  ::google::protobuf::uint64 wrappeduint64_;
  ::google::protobuf::uint64 wrappedfixed64_;
  ::google::protobuf::uint32 wrappedfixed32_;
  bool wrappedbool_;
  ::std::string* wrappedstring_;
  ::std::string* wrappedbytes_;
  ::google::protobuf::uint32 wrappeduint32_;
  ::google::protobuf::int32 wrappedsfixed32_;
  ::google::protobuf::int64 wrappedsfixed64_;
  ::google::protobuf::int64 wrappedsint64_;
  ::std::string* wrappeddescriptorfullname_;
  ::google::protobuf::int32 wrappedsint32_;
  ::google::protobuf::int32 wrappedenum_;
  ::std::string* wrappedmessagebytes_;
  ::google::protobuf::int32 wrappeddescriptorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_message_2dwrapping_2eproto();
  friend void protobuf_AssignDesc_message_2dwrapping_2eproto();
  friend void protobuf_ShutdownFile_message_2dwrapping_2eproto();

  void InitAsDefaultInstance();
  static WrappedMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// WrappedMessage

// optional double wrappedDouble = 1;
inline bool WrappedMessage::has_wrappeddouble() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WrappedMessage::set_has_wrappeddouble() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WrappedMessage::clear_has_wrappeddouble() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WrappedMessage::clear_wrappeddouble() {
  wrappeddouble_ = 0;
  clear_has_wrappeddouble();
}
inline double WrappedMessage::wrappeddouble() const {
  return wrappeddouble_;
}
inline void WrappedMessage::set_wrappeddouble(double value) {
  set_has_wrappeddouble();
  wrappeddouble_ = value;
}

// optional float wrappedFloat = 2;
inline bool WrappedMessage::has_wrappedfloat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WrappedMessage::set_has_wrappedfloat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WrappedMessage::clear_has_wrappedfloat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WrappedMessage::clear_wrappedfloat() {
  wrappedfloat_ = 0;
  clear_has_wrappedfloat();
}
inline float WrappedMessage::wrappedfloat() const {
  return wrappedfloat_;
}
inline void WrappedMessage::set_wrappedfloat(float value) {
  set_has_wrappedfloat();
  wrappedfloat_ = value;
}

// optional int64 wrappedInt64 = 3;
inline bool WrappedMessage::has_wrappedint64() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WrappedMessage::set_has_wrappedint64() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WrappedMessage::clear_has_wrappedint64() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WrappedMessage::clear_wrappedint64() {
  wrappedint64_ = GOOGLE_LONGLONG(0);
  clear_has_wrappedint64();
}
inline ::google::protobuf::int64 WrappedMessage::wrappedint64() const {
  return wrappedint64_;
}
inline void WrappedMessage::set_wrappedint64(::google::protobuf::int64 value) {
  set_has_wrappedint64();
  wrappedint64_ = value;
}

// optional uint64 wrappedUInt64 = 4;
inline bool WrappedMessage::has_wrappeduint64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WrappedMessage::set_has_wrappeduint64() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WrappedMessage::clear_has_wrappeduint64() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WrappedMessage::clear_wrappeduint64() {
  wrappeduint64_ = GOOGLE_ULONGLONG(0);
  clear_has_wrappeduint64();
}
inline ::google::protobuf::uint64 WrappedMessage::wrappeduint64() const {
  return wrappeduint64_;
}
inline void WrappedMessage::set_wrappeduint64(::google::protobuf::uint64 value) {
  set_has_wrappeduint64();
  wrappeduint64_ = value;
}

// optional int32 wrappedInt32 = 5;
inline bool WrappedMessage::has_wrappedint32() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WrappedMessage::set_has_wrappedint32() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WrappedMessage::clear_has_wrappedint32() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WrappedMessage::clear_wrappedint32() {
  wrappedint32_ = 0;
  clear_has_wrappedint32();
}
inline ::google::protobuf::int32 WrappedMessage::wrappedint32() const {
  return wrappedint32_;
}
inline void WrappedMessage::set_wrappedint32(::google::protobuf::int32 value) {
  set_has_wrappedint32();
  wrappedint32_ = value;
}

// optional fixed64 wrappedFixed64 = 6;
inline bool WrappedMessage::has_wrappedfixed64() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WrappedMessage::set_has_wrappedfixed64() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WrappedMessage::clear_has_wrappedfixed64() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WrappedMessage::clear_wrappedfixed64() {
  wrappedfixed64_ = GOOGLE_ULONGLONG(0);
  clear_has_wrappedfixed64();
}
inline ::google::protobuf::uint64 WrappedMessage::wrappedfixed64() const {
  return wrappedfixed64_;
}
inline void WrappedMessage::set_wrappedfixed64(::google::protobuf::uint64 value) {
  set_has_wrappedfixed64();
  wrappedfixed64_ = value;
}

// optional fixed32 wrappedFixed32 = 7;
inline bool WrappedMessage::has_wrappedfixed32() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WrappedMessage::set_has_wrappedfixed32() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WrappedMessage::clear_has_wrappedfixed32() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WrappedMessage::clear_wrappedfixed32() {
  wrappedfixed32_ = 0u;
  clear_has_wrappedfixed32();
}
inline ::google::protobuf::uint32 WrappedMessage::wrappedfixed32() const {
  return wrappedfixed32_;
}
inline void WrappedMessage::set_wrappedfixed32(::google::protobuf::uint32 value) {
  set_has_wrappedfixed32();
  wrappedfixed32_ = value;
}

// optional bool wrappedBool = 8;
inline bool WrappedMessage::has_wrappedbool() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WrappedMessage::set_has_wrappedbool() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WrappedMessage::clear_has_wrappedbool() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WrappedMessage::clear_wrappedbool() {
  wrappedbool_ = false;
  clear_has_wrappedbool();
}
inline bool WrappedMessage::wrappedbool() const {
  return wrappedbool_;
}
inline void WrappedMessage::set_wrappedbool(bool value) {
  set_has_wrappedbool();
  wrappedbool_ = value;
}

// optional string wrappedString = 9;
inline bool WrappedMessage::has_wrappedstring() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WrappedMessage::set_has_wrappedstring() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WrappedMessage::clear_has_wrappedstring() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WrappedMessage::clear_wrappedstring() {
  if (wrappedstring_ != &::google::protobuf::internal::kEmptyString) {
    wrappedstring_->clear();
  }
  clear_has_wrappedstring();
}
inline const ::std::string& WrappedMessage::wrappedstring() const {
  return *wrappedstring_;
}
inline void WrappedMessage::set_wrappedstring(const ::std::string& value) {
  set_has_wrappedstring();
  if (wrappedstring_ == &::google::protobuf::internal::kEmptyString) {
    wrappedstring_ = new ::std::string;
  }
  wrappedstring_->assign(value);
}
inline void WrappedMessage::set_wrappedstring(const char* value) {
  set_has_wrappedstring();
  if (wrappedstring_ == &::google::protobuf::internal::kEmptyString) {
    wrappedstring_ = new ::std::string;
  }
  wrappedstring_->assign(value);
}
inline void WrappedMessage::set_wrappedstring(const char* value, size_t size) {
  set_has_wrappedstring();
  if (wrappedstring_ == &::google::protobuf::internal::kEmptyString) {
    wrappedstring_ = new ::std::string;
  }
  wrappedstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WrappedMessage::mutable_wrappedstring() {
  set_has_wrappedstring();
  if (wrappedstring_ == &::google::protobuf::internal::kEmptyString) {
    wrappedstring_ = new ::std::string;
  }
  return wrappedstring_;
}
inline ::std::string* WrappedMessage::release_wrappedstring() {
  clear_has_wrappedstring();
  if (wrappedstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wrappedstring_;
    wrappedstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WrappedMessage::set_allocated_wrappedstring(::std::string* wrappedstring) {
  if (wrappedstring_ != &::google::protobuf::internal::kEmptyString) {
    delete wrappedstring_;
  }
  if (wrappedstring) {
    set_has_wrappedstring();
    wrappedstring_ = wrappedstring;
  } else {
    clear_has_wrappedstring();
    wrappedstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes wrappedBytes = 10;
inline bool WrappedMessage::has_wrappedbytes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WrappedMessage::set_has_wrappedbytes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WrappedMessage::clear_has_wrappedbytes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WrappedMessage::clear_wrappedbytes() {
  if (wrappedbytes_ != &::google::protobuf::internal::kEmptyString) {
    wrappedbytes_->clear();
  }
  clear_has_wrappedbytes();
}
inline const ::std::string& WrappedMessage::wrappedbytes() const {
  return *wrappedbytes_;
}
inline void WrappedMessage::set_wrappedbytes(const ::std::string& value) {
  set_has_wrappedbytes();
  if (wrappedbytes_ == &::google::protobuf::internal::kEmptyString) {
    wrappedbytes_ = new ::std::string;
  }
  wrappedbytes_->assign(value);
}
inline void WrappedMessage::set_wrappedbytes(const char* value) {
  set_has_wrappedbytes();
  if (wrappedbytes_ == &::google::protobuf::internal::kEmptyString) {
    wrappedbytes_ = new ::std::string;
  }
  wrappedbytes_->assign(value);
}
inline void WrappedMessage::set_wrappedbytes(const void* value, size_t size) {
  set_has_wrappedbytes();
  if (wrappedbytes_ == &::google::protobuf::internal::kEmptyString) {
    wrappedbytes_ = new ::std::string;
  }
  wrappedbytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WrappedMessage::mutable_wrappedbytes() {
  set_has_wrappedbytes();
  if (wrappedbytes_ == &::google::protobuf::internal::kEmptyString) {
    wrappedbytes_ = new ::std::string;
  }
  return wrappedbytes_;
}
inline ::std::string* WrappedMessage::release_wrappedbytes() {
  clear_has_wrappedbytes();
  if (wrappedbytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wrappedbytes_;
    wrappedbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WrappedMessage::set_allocated_wrappedbytes(::std::string* wrappedbytes) {
  if (wrappedbytes_ != &::google::protobuf::internal::kEmptyString) {
    delete wrappedbytes_;
  }
  if (wrappedbytes) {
    set_has_wrappedbytes();
    wrappedbytes_ = wrappedbytes;
  } else {
    clear_has_wrappedbytes();
    wrappedbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 wrappedUInt32 = 11;
inline bool WrappedMessage::has_wrappeduint32() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WrappedMessage::set_has_wrappeduint32() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WrappedMessage::clear_has_wrappeduint32() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WrappedMessage::clear_wrappeduint32() {
  wrappeduint32_ = 0u;
  clear_has_wrappeduint32();
}
inline ::google::protobuf::uint32 WrappedMessage::wrappeduint32() const {
  return wrappeduint32_;
}
inline void WrappedMessage::set_wrappeduint32(::google::protobuf::uint32 value) {
  set_has_wrappeduint32();
  wrappeduint32_ = value;
}

// optional sfixed32 wrappedSFixed32 = 12;
inline bool WrappedMessage::has_wrappedsfixed32() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WrappedMessage::set_has_wrappedsfixed32() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WrappedMessage::clear_has_wrappedsfixed32() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WrappedMessage::clear_wrappedsfixed32() {
  wrappedsfixed32_ = 0;
  clear_has_wrappedsfixed32();
}
inline ::google::protobuf::int32 WrappedMessage::wrappedsfixed32() const {
  return wrappedsfixed32_;
}
inline void WrappedMessage::set_wrappedsfixed32(::google::protobuf::int32 value) {
  set_has_wrappedsfixed32();
  wrappedsfixed32_ = value;
}

// optional sfixed64 wrappedSFixed64 = 13;
inline bool WrappedMessage::has_wrappedsfixed64() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WrappedMessage::set_has_wrappedsfixed64() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WrappedMessage::clear_has_wrappedsfixed64() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WrappedMessage::clear_wrappedsfixed64() {
  wrappedsfixed64_ = GOOGLE_LONGLONG(0);
  clear_has_wrappedsfixed64();
}
inline ::google::protobuf::int64 WrappedMessage::wrappedsfixed64() const {
  return wrappedsfixed64_;
}
inline void WrappedMessage::set_wrappedsfixed64(::google::protobuf::int64 value) {
  set_has_wrappedsfixed64();
  wrappedsfixed64_ = value;
}

// optional sint32 wrappedSInt32 = 14;
inline bool WrappedMessage::has_wrappedsint32() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void WrappedMessage::set_has_wrappedsint32() {
  _has_bits_[0] |= 0x00002000u;
}
inline void WrappedMessage::clear_has_wrappedsint32() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void WrappedMessage::clear_wrappedsint32() {
  wrappedsint32_ = 0;
  clear_has_wrappedsint32();
}
inline ::google::protobuf::int32 WrappedMessage::wrappedsint32() const {
  return wrappedsint32_;
}
inline void WrappedMessage::set_wrappedsint32(::google::protobuf::int32 value) {
  set_has_wrappedsint32();
  wrappedsint32_ = value;
}

// optional sint64 wrappedSInt64 = 15;
inline bool WrappedMessage::has_wrappedsint64() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void WrappedMessage::set_has_wrappedsint64() {
  _has_bits_[0] |= 0x00004000u;
}
inline void WrappedMessage::clear_has_wrappedsint64() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void WrappedMessage::clear_wrappedsint64() {
  wrappedsint64_ = GOOGLE_LONGLONG(0);
  clear_has_wrappedsint64();
}
inline ::google::protobuf::int64 WrappedMessage::wrappedsint64() const {
  return wrappedsint64_;
}
inline void WrappedMessage::set_wrappedsint64(::google::protobuf::int64 value) {
  set_has_wrappedsint64();
  wrappedsint64_ = value;
}

// optional string wrappedDescriptorFullName = 16;
inline bool WrappedMessage::has_wrappeddescriptorfullname() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void WrappedMessage::set_has_wrappeddescriptorfullname() {
  _has_bits_[0] |= 0x00008000u;
}
inline void WrappedMessage::clear_has_wrappeddescriptorfullname() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void WrappedMessage::clear_wrappeddescriptorfullname() {
  if (wrappeddescriptorfullname_ != &::google::protobuf::internal::kEmptyString) {
    wrappeddescriptorfullname_->clear();
  }
  clear_has_wrappeddescriptorfullname();
}
inline const ::std::string& WrappedMessage::wrappeddescriptorfullname() const {
  return *wrappeddescriptorfullname_;
}
inline void WrappedMessage::set_wrappeddescriptorfullname(const ::std::string& value) {
  set_has_wrappeddescriptorfullname();
  if (wrappeddescriptorfullname_ == &::google::protobuf::internal::kEmptyString) {
    wrappeddescriptorfullname_ = new ::std::string;
  }
  wrappeddescriptorfullname_->assign(value);
}
inline void WrappedMessage::set_wrappeddescriptorfullname(const char* value) {
  set_has_wrappeddescriptorfullname();
  if (wrappeddescriptorfullname_ == &::google::protobuf::internal::kEmptyString) {
    wrappeddescriptorfullname_ = new ::std::string;
  }
  wrappeddescriptorfullname_->assign(value);
}
inline void WrappedMessage::set_wrappeddescriptorfullname(const char* value, size_t size) {
  set_has_wrappeddescriptorfullname();
  if (wrappeddescriptorfullname_ == &::google::protobuf::internal::kEmptyString) {
    wrappeddescriptorfullname_ = new ::std::string;
  }
  wrappeddescriptorfullname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WrappedMessage::mutable_wrappeddescriptorfullname() {
  set_has_wrappeddescriptorfullname();
  if (wrappeddescriptorfullname_ == &::google::protobuf::internal::kEmptyString) {
    wrappeddescriptorfullname_ = new ::std::string;
  }
  return wrappeddescriptorfullname_;
}
inline ::std::string* WrappedMessage::release_wrappeddescriptorfullname() {
  clear_has_wrappeddescriptorfullname();
  if (wrappeddescriptorfullname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wrappeddescriptorfullname_;
    wrappeddescriptorfullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WrappedMessage::set_allocated_wrappeddescriptorfullname(::std::string* wrappeddescriptorfullname) {
  if (wrappeddescriptorfullname_ != &::google::protobuf::internal::kEmptyString) {
    delete wrappeddescriptorfullname_;
  }
  if (wrappeddescriptorfullname) {
    set_has_wrappeddescriptorfullname();
    wrappeddescriptorfullname_ = wrappeddescriptorfullname;
  } else {
    clear_has_wrappeddescriptorfullname();
    wrappeddescriptorfullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes wrappedMessageBytes = 17;
inline bool WrappedMessage::has_wrappedmessagebytes() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void WrappedMessage::set_has_wrappedmessagebytes() {
  _has_bits_[0] |= 0x00010000u;
}
inline void WrappedMessage::clear_has_wrappedmessagebytes() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void WrappedMessage::clear_wrappedmessagebytes() {
  if (wrappedmessagebytes_ != &::google::protobuf::internal::kEmptyString) {
    wrappedmessagebytes_->clear();
  }
  clear_has_wrappedmessagebytes();
}
inline const ::std::string& WrappedMessage::wrappedmessagebytes() const {
  return *wrappedmessagebytes_;
}
inline void WrappedMessage::set_wrappedmessagebytes(const ::std::string& value) {
  set_has_wrappedmessagebytes();
  if (wrappedmessagebytes_ == &::google::protobuf::internal::kEmptyString) {
    wrappedmessagebytes_ = new ::std::string;
  }
  wrappedmessagebytes_->assign(value);
}
inline void WrappedMessage::set_wrappedmessagebytes(const char* value) {
  set_has_wrappedmessagebytes();
  if (wrappedmessagebytes_ == &::google::protobuf::internal::kEmptyString) {
    wrappedmessagebytes_ = new ::std::string;
  }
  wrappedmessagebytes_->assign(value);
}
inline void WrappedMessage::set_wrappedmessagebytes(const void* value, size_t size) {
  set_has_wrappedmessagebytes();
  if (wrappedmessagebytes_ == &::google::protobuf::internal::kEmptyString) {
    wrappedmessagebytes_ = new ::std::string;
  }
  wrappedmessagebytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WrappedMessage::mutable_wrappedmessagebytes() {
  set_has_wrappedmessagebytes();
  if (wrappedmessagebytes_ == &::google::protobuf::internal::kEmptyString) {
    wrappedmessagebytes_ = new ::std::string;
  }
  return wrappedmessagebytes_;
}
inline ::std::string* WrappedMessage::release_wrappedmessagebytes() {
  clear_has_wrappedmessagebytes();
  if (wrappedmessagebytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wrappedmessagebytes_;
    wrappedmessagebytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WrappedMessage::set_allocated_wrappedmessagebytes(::std::string* wrappedmessagebytes) {
  if (wrappedmessagebytes_ != &::google::protobuf::internal::kEmptyString) {
    delete wrappedmessagebytes_;
  }
  if (wrappedmessagebytes) {
    set_has_wrappedmessagebytes();
    wrappedmessagebytes_ = wrappedmessagebytes;
  } else {
    clear_has_wrappedmessagebytes();
    wrappedmessagebytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 wrappedEnum = 18;
inline bool WrappedMessage::has_wrappedenum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void WrappedMessage::set_has_wrappedenum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void WrappedMessage::clear_has_wrappedenum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void WrappedMessage::clear_wrappedenum() {
  wrappedenum_ = 0;
  clear_has_wrappedenum();
}
inline ::google::protobuf::int32 WrappedMessage::wrappedenum() const {
  return wrappedenum_;
}
inline void WrappedMessage::set_wrappedenum(::google::protobuf::int32 value) {
  set_has_wrappedenum();
  wrappedenum_ = value;
}

// optional int32 wrappedDescriptorId = 19;
inline bool WrappedMessage::has_wrappeddescriptorid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void WrappedMessage::set_has_wrappeddescriptorid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void WrappedMessage::clear_has_wrappeddescriptorid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void WrappedMessage::clear_wrappeddescriptorid() {
  wrappeddescriptorid_ = 0;
  clear_has_wrappeddescriptorid();
}
inline ::google::protobuf::int32 WrappedMessage::wrappeddescriptorid() const {
  return wrappeddescriptorid_;
}
inline void WrappedMessage::set_wrappeddescriptorid(::google::protobuf::int32 value) {
  set_has_wrappeddescriptorid();
  wrappeddescriptorid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protostream
}  // namespace infinispan
}  // namespace org

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2dwrapping_2eproto__INCLUDED
