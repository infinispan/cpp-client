// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message-wrapping.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message-wrapping.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

#include <iostream>
// @@protoc_insertion_point(includes)

namespace org {
namespace infinispan {
namespace protostream {

namespace {

const ::google::protobuf::Descriptor* WrappedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WrappedMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2dwrapping_2eproto() {
  protobuf_AddDesc_message_2dwrapping_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message-wrapping.proto");
  GOOGLE_CHECK(file != NULL);
  WrappedMessage_descriptor_ = file->message_type(0);
  static const int WrappedMessage_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappeddouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappeduint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedfixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedfixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedbool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappeduint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedsfixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedsfixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedsint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedsint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappeddescriptorfullname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedmessagebytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappedenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, wrappeddescriptorid_),
  };
  WrappedMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WrappedMessage_descriptor_,
      WrappedMessage::default_instance_,
      WrappedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WrappedMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2dwrapping_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WrappedMessage_descriptor_, &WrappedMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2dwrapping_2eproto() {
  delete WrappedMessage::default_instance_;
  delete WrappedMessage_reflection_;
}

void protobuf_AddDesc_message_2dwrapping_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026message-wrapping.proto\022\032org.infinispan"
    ".protostream\"\333\003\n\016WrappedMessage\022\025\n\rwrapp"
    "edDouble\030\001 \001(\001\022\024\n\014wrappedFloat\030\002 \001(\002\022\024\n\014"
    "wrappedInt64\030\003 \001(\003\022\025\n\rwrappedUInt64\030\004 \001("
    "\004\022\024\n\014wrappedInt32\030\005 \001(\005\022\026\n\016wrappedFixed6"
    "4\030\006 \001(\006\022\026\n\016wrappedFixed32\030\007 \001(\007\022\023\n\013wrapp"
    "edBool\030\010 \001(\010\022\025\n\rwrappedString\030\t \001(\t\022\024\n\014w"
    "rappedBytes\030\n \001(\014\022\025\n\rwrappedUInt32\030\013 \001(\r"
    "\022\027\n\017wrappedSFixed32\030\014 \001(\017\022\027\n\017wrappedSFix"
    "ed64\030\r \001(\020\022\025\n\rwrappedSInt32\030\016 \001(\021\022\025\n\rwra"
    "ppedSInt64\030\017 \001(\022\022!\n\031wrappedDescriptorFul"
    "lName\030\020 \001(\t\022\033\n\023wrappedMessageBytes\030\021 \001(\014"
    "\022\023\n\013wrappedEnum\030\022 \001(\005\022\033\n\023wrappedDescript"
    "orId\030\023 \001(\005", 530);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message-wrapping.proto", &protobuf_RegisterTypes);
  WrappedMessage::default_instance_ = new WrappedMessage();
  WrappedMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2dwrapping_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2dwrapping_2eproto {
  StaticDescriptorInitializer_message_2dwrapping_2eproto() {
    protobuf_AddDesc_message_2dwrapping_2eproto();
  }
} static_descriptor_initializer_message_2dwrapping_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WrappedMessage::kWrappedDoubleFieldNumber;
const int WrappedMessage::kWrappedFloatFieldNumber;
const int WrappedMessage::kWrappedInt64FieldNumber;
const int WrappedMessage::kWrappedUInt64FieldNumber;
const int WrappedMessage::kWrappedInt32FieldNumber;
const int WrappedMessage::kWrappedFixed64FieldNumber;
const int WrappedMessage::kWrappedFixed32FieldNumber;
const int WrappedMessage::kWrappedBoolFieldNumber;
const int WrappedMessage::kWrappedStringFieldNumber;
const int WrappedMessage::kWrappedBytesFieldNumber;
const int WrappedMessage::kWrappedUInt32FieldNumber;
const int WrappedMessage::kWrappedSFixed32FieldNumber;
const int WrappedMessage::kWrappedSFixed64FieldNumber;
const int WrappedMessage::kWrappedSInt32FieldNumber;
const int WrappedMessage::kWrappedSInt64FieldNumber;
const int WrappedMessage::kWrappedDescriptorFullNameFieldNumber;
const int WrappedMessage::kWrappedMessageBytesFieldNumber;
const int WrappedMessage::kWrappedEnumFieldNumber;
const int WrappedMessage::kWrappedDescriptorIdFieldNumber;
#endif  // !_MSC_VER

WrappedMessage::WrappedMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WrappedMessage::InitAsDefaultInstance() {
}

WrappedMessage::WrappedMessage(const WrappedMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WrappedMessage::SharedCtor() {
  _cached_size_ = 0;
  wrappeddouble_ = 0;
  wrappedfloat_ = 0;
  wrappedint64_ = GOOGLE_LONGLONG(0);
  wrappeduint64_ = GOOGLE_ULONGLONG(0);
  wrappedint32_ = 0;
  wrappedfixed64_ = GOOGLE_ULONGLONG(0);
  wrappedfixed32_ = 0u;
  wrappedbool_ = false;
  wrappedstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wrappedbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wrappeduint32_ = 0u;
  wrappedsfixed32_ = 0;
  wrappedsfixed64_ = GOOGLE_LONGLONG(0);
  wrappedsint32_ = 0;
  wrappedsint64_ = GOOGLE_LONGLONG(0);
  wrappeddescriptorfullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wrappedmessagebytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wrappedenum_ = 0;
  wrappeddescriptorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WrappedMessage::~WrappedMessage() {
  SharedDtor();
}

void WrappedMessage::SharedDtor() {
  if (wrappedstring_ != &::google::protobuf::internal::kEmptyString) {
    delete wrappedstring_;
  }
  if (wrappedbytes_ != &::google::protobuf::internal::kEmptyString) {
    delete wrappedbytes_;
  }
  if (wrappeddescriptorfullname_ != &::google::protobuf::internal::kEmptyString) {
    delete wrappeddescriptorfullname_;
  }
  if (wrappedmessagebytes_ != &::google::protobuf::internal::kEmptyString) {
    delete wrappedmessagebytes_;
  }
  if (this != default_instance_) {
  }
}

void WrappedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WrappedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WrappedMessage_descriptor_;
}

const WrappedMessage& WrappedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2dwrapping_2eproto();
  return *default_instance_;
}

WrappedMessage* WrappedMessage::default_instance_ = NULL;

WrappedMessage* WrappedMessage::New() const {
  return new WrappedMessage;
}

void WrappedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wrappeddouble_ = 0;
    wrappedfloat_ = 0;
    wrappedint64_ = GOOGLE_LONGLONG(0);
    wrappeduint64_ = GOOGLE_ULONGLONG(0);
    wrappedint32_ = 0;
    wrappedfixed64_ = GOOGLE_ULONGLONG(0);
    wrappedfixed32_ = 0u;
    wrappedbool_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_wrappedstring()) {
      if (wrappedstring_ != &::google::protobuf::internal::kEmptyString) {
        wrappedstring_->clear();
      }
    }
    if (has_wrappedbytes()) {
      if (wrappedbytes_ != &::google::protobuf::internal::kEmptyString) {
        wrappedbytes_->clear();
      }
    }
    wrappeduint32_ = 0u;
    wrappedsfixed32_ = 0;
    wrappedsfixed64_ = GOOGLE_LONGLONG(0);
    wrappedsint32_ = 0;
    wrappedsint64_ = GOOGLE_LONGLONG(0);
    if (has_wrappeddescriptorfullname()) {
      if (wrappeddescriptorfullname_ != &::google::protobuf::internal::kEmptyString) {
        wrappeddescriptorfullname_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_wrappedmessagebytes()) {
      if (wrappedmessagebytes_ != &::google::protobuf::internal::kEmptyString) {
        wrappedmessagebytes_->clear();
      }
    }
    wrappedenum_ = 0;
    wrappeddescriptorid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WrappedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double wrappedDouble = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wrappeddouble_)));
          set_has_wrappeddouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_wrappedFloat;
        break;
      }

      // optional float wrappedFloat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wrappedFloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wrappedfloat_)));
          set_has_wrappedfloat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wrappedInt64;
        break;
      }

      // optional int64 wrappedInt64 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrappedInt64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wrappedint64_)));
          set_has_wrappedint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wrappedUInt64;
        break;
      }

      // optional uint64 wrappedUInt64 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrappedUInt64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wrappeduint64_)));
          set_has_wrappeduint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wrappedInt32;
        break;
      }

      // optional int32 wrappedInt32 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrappedInt32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrappedint32_)));
          set_has_wrappedint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_wrappedFixed64;
        break;
      }

      // optional fixed64 wrappedFixed64 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wrappedFixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &wrappedfixed64_)));
          set_has_wrappedfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_wrappedFixed32;
        break;
      }

      // optional fixed32 wrappedFixed32 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wrappedFixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &wrappedfixed32_)));
          set_has_wrappedfixed32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_wrappedBool;
        break;
      }

      // optional bool wrappedBool = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrappedBool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wrappedbool_)));
          set_has_wrappedbool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_wrappedString;
        break;
      }

      // optional string wrappedString = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wrappedString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wrappedstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wrappedstring().data(), this->wrappedstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_wrappedBytes;
        break;
      }

      // optional bytes wrappedBytes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wrappedBytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wrappedbytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_wrappedUInt32;
        break;
      }

      // optional uint32 wrappedUInt32 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrappedUInt32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wrappeduint32_)));
          set_has_wrappeduint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_wrappedSFixed32;
        break;
      }

      // optional sfixed32 wrappedSFixed32 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wrappedSFixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &wrappedsfixed32_)));
          set_has_wrappedsfixed32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_wrappedSFixed64;
        break;
      }

      // optional sfixed64 wrappedSFixed64 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wrappedSFixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &wrappedsfixed64_)));
          set_has_wrappedsfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_wrappedSInt32;
        break;
      }

      // optional sint32 wrappedSInt32 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrappedSInt32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &wrappedsint32_)));
          set_has_wrappedsint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_wrappedSInt64;
        break;
      }

      // optional sint64 wrappedSInt64 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrappedSInt64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &wrappedsint64_)));
          set_has_wrappedsint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_wrappedDescriptorFullName;
        break;
      }

      // optional string wrappedDescriptorFullName = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wrappedDescriptorFullName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wrappeddescriptorfullname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wrappeddescriptorfullname().data(), this->wrappeddescriptorfullname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_wrappedMessageBytes;
        break;
      }

      // optional bytes wrappedMessageBytes = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wrappedMessageBytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wrappedmessagebytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_wrappedEnum;
        break;
      }

      // optional int32 wrappedEnum = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrappedEnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrappedenum_)));
          set_has_wrappedenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_wrappedDescriptorId;
        break;
      }

      // optional int32 wrappedDescriptorId = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrappedDescriptorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrappeddescriptorid_)));
          set_has_wrappeddescriptorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WrappedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double wrappedDouble = 1;
  if (has_wrappeddouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->wrappeddouble(), output);
  }

  // optional float wrappedFloat = 2;
  if (has_wrappedfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->wrappedfloat(), output);
  }

  // optional int64 wrappedInt64 = 3;
  if (has_wrappedint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->wrappedint64(), output);
  }

  // optional uint64 wrappedUInt64 = 4;
  if (has_wrappeduint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->wrappeduint64(), output);
  }

  // optional int32 wrappedInt32 = 5;
  if (has_wrappedint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wrappedint32(), output);
  }

  // optional fixed64 wrappedFixed64 = 6;
  if (has_wrappedfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->wrappedfixed64(), output);
  }

  // optional fixed32 wrappedFixed32 = 7;
  if (has_wrappedfixed32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->wrappedfixed32(), output);
  }

  // optional bool wrappedBool = 8;
  if (has_wrappedbool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->wrappedbool(), output);
  }

  // optional string wrappedString = 9;
  if (has_wrappedstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wrappedstring().data(), this->wrappedstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->wrappedstring(), output);
  }

  // optional bytes wrappedBytes = 10;
  if (has_wrappedbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->wrappedbytes(), output);
  }

  // optional uint32 wrappedUInt32 = 11;
  if (has_wrappeduint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wrappeduint32(), output);
  }

  // optional sfixed32 wrappedSFixed32 = 12;
  if (has_wrappedsfixed32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(12, this->wrappedsfixed32(), output);
  }

  // optional sfixed64 wrappedSFixed64 = 13;
  if (has_wrappedsfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->wrappedsfixed64(), output);
  }

  // optional sint32 wrappedSInt32 = 14;
  if (has_wrappedsint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->wrappedsint32(), output);
  }

  // optional sint64 wrappedSInt64 = 15;
  if (has_wrappedsint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(15, this->wrappedsint64(), output);
  }

  // optional string wrappedDescriptorFullName = 16;
  if (has_wrappeddescriptorfullname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wrappeddescriptorfullname().data(), this->wrappeddescriptorfullname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->wrappeddescriptorfullname(), output);
  }

  // optional bytes wrappedMessageBytes = 17;
  if (has_wrappedmessagebytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->wrappedmessagebytes(), output);
  }

  // optional int32 wrappedEnum = 18;
  if (has_wrappedenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->wrappedenum(), output);
  }

  // optional int32 wrappedDescriptorId = 19;
  if (has_wrappeddescriptorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->wrappeddescriptorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WrappedMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double wrappedDouble = 1;
  if (has_wrappeddouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->wrappeddouble(), target);
  }

  // optional float wrappedFloat = 2;
  if (has_wrappedfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->wrappedfloat(), target);
  }

  // optional int64 wrappedInt64 = 3;
  if (has_wrappedint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->wrappedint64(), target);
  }

  // optional uint64 wrappedUInt64 = 4;
  if (has_wrappeduint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->wrappeduint64(), target);
  }

  // optional int32 wrappedInt32 = 5;
  if (has_wrappedint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wrappedint32(), target);
  }

  // optional fixed64 wrappedFixed64 = 6;
  if (has_wrappedfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->wrappedfixed64(), target);
  }

  // optional fixed32 wrappedFixed32 = 7;
  if (has_wrappedfixed32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->wrappedfixed32(), target);
  }

  // optional bool wrappedBool = 8;
  if (has_wrappedbool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->wrappedbool(), target);
  }

  // optional string wrappedString = 9;
  if (has_wrappedstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wrappedstring().data(), this->wrappedstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->wrappedstring(), target);
  }

  // optional bytes wrappedBytes = 10;
  if (has_wrappedbytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->wrappedbytes(), target);
  }

  // optional uint32 wrappedUInt32 = 11;
  if (has_wrappeduint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wrappeduint32(), target);
  }

  // optional sfixed32 wrappedSFixed32 = 12;
  if (has_wrappedsfixed32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(12, this->wrappedsfixed32(), target);
  }

  // optional sfixed64 wrappedSFixed64 = 13;
  if (has_wrappedsfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->wrappedsfixed64(), target);
  }

  // optional sint32 wrappedSInt32 = 14;
  if (has_wrappedsint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->wrappedsint32(), target);
  }

  // optional sint64 wrappedSInt64 = 15;
  if (has_wrappedsint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(15, this->wrappedsint64(), target);
  }

  // optional string wrappedDescriptorFullName = 16;
  if (has_wrappeddescriptorfullname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wrappeddescriptorfullname().data(), this->wrappeddescriptorfullname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->wrappeddescriptorfullname(), target);
  }

  // optional bytes wrappedMessageBytes = 17;
  if (has_wrappedmessagebytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->wrappedmessagebytes(), target);
  }

  // optional int32 wrappedEnum = 18;
  if (has_wrappedenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->wrappedenum(), target);
  }

  // optional int32 wrappedDescriptorId = 19;
  if (has_wrappeddescriptorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->wrappeddescriptorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WrappedMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double wrappedDouble = 1;
    if (has_wrappeddouble()) {
      total_size += 1 + 8;
    }

    // optional float wrappedFloat = 2;
    if (has_wrappedfloat()) {
      total_size += 1 + 4;
    }

    // optional int64 wrappedInt64 = 3;
    if (has_wrappedint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wrappedint64());
    }

    // optional uint64 wrappedUInt64 = 4;
    if (has_wrappeduint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wrappeduint64());
    }

    // optional int32 wrappedInt32 = 5;
    if (has_wrappedint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrappedint32());
    }

    // optional fixed64 wrappedFixed64 = 6;
    if (has_wrappedfixed64()) {
      total_size += 1 + 8;
    }

    // optional fixed32 wrappedFixed32 = 7;
    if (has_wrappedfixed32()) {
      total_size += 1 + 4;
    }

    // optional bool wrappedBool = 8;
    if (has_wrappedbool()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string wrappedString = 9;
    if (has_wrappedstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wrappedstring());
    }

    // optional bytes wrappedBytes = 10;
    if (has_wrappedbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wrappedbytes());
    }

    // optional uint32 wrappedUInt32 = 11;
    if (has_wrappeduint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wrappeduint32());
    }

    // optional sfixed32 wrappedSFixed32 = 12;
    if (has_wrappedsfixed32()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 wrappedSFixed64 = 13;
    if (has_wrappedsfixed64()) {
      total_size += 1 + 8;
    }

    // optional sint32 wrappedSInt32 = 14;
    if (has_wrappedsint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->wrappedsint32());
    }

    // optional sint64 wrappedSInt64 = 15;
    if (has_wrappedsint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->wrappedsint64());
    }

    // optional string wrappedDescriptorFullName = 16;
    if (has_wrappeddescriptorfullname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wrappeddescriptorfullname());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes wrappedMessageBytes = 17;
    if (has_wrappedmessagebytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wrappedmessagebytes());
    }

    // optional int32 wrappedEnum = 18;
    if (has_wrappedenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrappedenum());
    }

    // optional int32 wrappedDescriptorId = 19;
    if (has_wrappeddescriptorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrappeddescriptorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WrappedMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WrappedMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WrappedMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WrappedMessage::MergeFrom(const WrappedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wrappeddouble()) {
      set_wrappeddouble(from.wrappeddouble());
    }
    if (from.has_wrappedfloat()) {
      set_wrappedfloat(from.wrappedfloat());
    }
    if (from.has_wrappedint64()) {
      set_wrappedint64(from.wrappedint64());
    }
    if (from.has_wrappeduint64()) {
      set_wrappeduint64(from.wrappeduint64());
    }
    if (from.has_wrappedint32()) {
      set_wrappedint32(from.wrappedint32());
    }
    if (from.has_wrappedfixed64()) {
      set_wrappedfixed64(from.wrappedfixed64());
    }
    if (from.has_wrappedfixed32()) {
      set_wrappedfixed32(from.wrappedfixed32());
    }
    if (from.has_wrappedbool()) {
      set_wrappedbool(from.wrappedbool());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wrappedstring()) {
      set_wrappedstring(from.wrappedstring());
    }
    if (from.has_wrappedbytes()) {
      set_wrappedbytes(from.wrappedbytes());
    }
    if (from.has_wrappeduint32()) {
      set_wrappeduint32(from.wrappeduint32());
    }
    if (from.has_wrappedsfixed32()) {
      set_wrappedsfixed32(from.wrappedsfixed32());
    }
    if (from.has_wrappedsfixed64()) {
      set_wrappedsfixed64(from.wrappedsfixed64());
    }
    if (from.has_wrappedsint32()) {
      set_wrappedsint32(from.wrappedsint32());
    }
    if (from.has_wrappedsint64()) {
      set_wrappedsint64(from.wrappedsint64());
    }
    if (from.has_wrappeddescriptorfullname()) {
      set_wrappeddescriptorfullname(from.wrappeddescriptorfullname());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wrappedmessagebytes()) {
      set_wrappedmessagebytes(from.wrappedmessagebytes());
    }
    if (from.has_wrappedenum()) {
      set_wrappedenum(from.wrappedenum());
    }
    if (from.has_wrappeddescriptorid()) {
      set_wrappeddescriptorid(from.wrappeddescriptorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WrappedMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrappedMessage::CopyFrom(const WrappedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrappedMessage::IsInitialized() const {

  return true;
}

void WrappedMessage::Swap(WrappedMessage* other) {
  if (other != this) {
    std::swap(wrappeddouble_, other->wrappeddouble_);
    std::swap(wrappedfloat_, other->wrappedfloat_);
    std::swap(wrappedint64_, other->wrappedint64_);
    std::swap(wrappeduint64_, other->wrappeduint64_);
    std::swap(wrappedint32_, other->wrappedint32_);
    std::swap(wrappedfixed64_, other->wrappedfixed64_);
    std::swap(wrappedfixed32_, other->wrappedfixed32_);
    std::swap(wrappedbool_, other->wrappedbool_);
    std::swap(wrappedstring_, other->wrappedstring_);
    std::swap(wrappedbytes_, other->wrappedbytes_);
    std::swap(wrappeduint32_, other->wrappeduint32_);
    std::swap(wrappedsfixed32_, other->wrappedsfixed32_);
    std::swap(wrappedsfixed64_, other->wrappedsfixed64_);
    std::swap(wrappedsint32_, other->wrappedsint32_);
    std::swap(wrappedsint64_, other->wrappedsint64_);
    std::swap(wrappeddescriptorfullname_, other->wrappeddescriptorfullname_);
    std::swap(wrappedmessagebytes_, other->wrappedmessagebytes_);
    std::swap(wrappedenum_, other->wrappedenum_);
    std::swap(wrappeddescriptorid_, other->wrappeddescriptorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WrappedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WrappedMessage_descriptor_;
  metadata.reflection = WrappedMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protostream
}  // namespace infinispan
}  // namespace org

int main()
{
  org::infinispan::protostream::WrappedMessage wm;
  wm.set_wrappeddescriptorid(42);
  char ar[]={ 0x08 ,0x01 ,0x1a ,0x03 ,0x54 ,0x6f ,0x6d ,0x22 ,0x03 ,0x43 ,0x61 ,0x74 ,0x38 ,0x03 };
  wm.set_wrappedmessagebytes(ar);
  wm.SerializeToOstream(&std::cout);
}

// @@protoc_insertion_point(global_scope)
