// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sample_bank_account {

namespace {

const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_Address_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* User_Gender_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account_Limits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account_Limits_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* int_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  int_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_list_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bank_2eproto() {
  protobuf_AddDesc_bank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bank.proto");
  GOOGLE_CHECK(file != NULL);
  User_descriptor_ = file->message_type(0);
  static const int User_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, accountids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, surname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, addresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, notes_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  User_Address_descriptor_ = User_descriptor_->nested_type(0);
  static const int User_Address_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User_Address, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User_Address, postcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User_Address, number_),
  };
  User_Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_Address_descriptor_,
      User_Address::default_instance_,
      User_Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User_Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User_Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User_Address));
  User_Gender_descriptor_ = User_descriptor_->enum_type(0);
  Account_descriptor_ = file->message_type(1);
  static const int Account_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, creationdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, limits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, blurb_),
  };
  Account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account_descriptor_,
      Account::default_instance_,
      Account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account));
  Account_Limits_descriptor_ = Account_descriptor_->nested_type(0);
  static const int Account_Limits_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_Limits, maxdailylimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_Limits, maxtransactionlimit_),
  };
  Account_Limits_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account_Limits_descriptor_,
      Account_Limits::default_instance_,
      Account_Limits_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_Limits, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_Limits, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account_Limits));
  Transaction_descriptor_ = file->message_type(2);
  static const int Transaction_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, isdebit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, isvalid_),
  };
  Transaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transaction_descriptor_,
      Transaction::default_instance_,
      Transaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transaction));
  int_array_descriptor_ = file->message_type(3);
  static const int int_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(int_array, thearray_),
  };
  int_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      int_array_descriptor_,
      int_array::default_instance_,
      int_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(int_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(int_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(int_array));
  user_list_descriptor_ = file->message_type(4);
  static const int user_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_list, thelist_),
  };
  user_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_list_descriptor_,
      user_list::default_instance_,
      user_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_list));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_Address_descriptor_, &User_Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account_descriptor_, &Account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account_Limits_descriptor_, &Account_Limits::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transaction_descriptor_, &Transaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    int_array_descriptor_, &int_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_list_descriptor_, &user_list::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bank_2eproto() {
  delete User::default_instance_;
  delete User_reflection_;
  delete User_Address::default_instance_;
  delete User_Address_reflection_;
  delete Account::default_instance_;
  delete Account_reflection_;
  delete Account::_default_description_;
  delete Account_Limits::default_instance_;
  delete Account_Limits_reflection_;
  delete Transaction::default_instance_;
  delete Transaction_reflection_;
  delete int_array::default_instance_;
  delete int_array_reflection_;
  delete user_list::default_instance_;
  delete user_list_reflection_;
}

void protobuf_AddDesc_bank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbank.proto\022\023sample_bank_account\"\246\002\n\004Us"
    "er\022\n\n\002id\030\001 \002(\005\022\022\n\naccountIds\030\002 \003(\005\022\014\n\004na"
    "me\030\003 \002(\t\022\017\n\007surname\030\004 \002(\t\0224\n\taddresses\030\005"
    " \003(\0132!.sample_bank_account.User.Address\022"
    "\013\n\003age\030\006 \001(\005\0220\n\006gender\030\007 \001(\0162 .sample_ba"
    "nk_account.User.Gender\022\r\n\005notes\030\010 \001(\t\032;\n"
    "\007Address\022\016\n\006street\030\001 \002(\t\022\020\n\010postCode\030\002 \002"
    "(\t\022\016\n\006number\030\003 \002(\005\"\036\n\006Gender\022\010\n\004MALE\020\000\022\n"
    "\n\006FEMALE\020\001\"\324\001\n\007Account\022\n\n\002id\030\001 \002(\005\022%\n\013de"
    "scription\030\002 \001(\t:\020Checking account\022\024\n\014cre"
    "ationDate\030\003 \002(\006\0223\n\006limits\030\004 \001(\0132#.sample"
    "_bank_account.Account.Limits\022\r\n\005blurb\030\005 "
    "\003(\014\032<\n\006Limits\022\025\n\rmaxDailyLimit\030\001 \001(\001\022\033\n\023"
    "maxTransactionLimit\030\002 \001(\001\"\201\001\n\013Transactio"
    "n\022\n\n\002id\030\001 \002(\005\022\023\n\013description\030\002 \001(\t\022\021\n\tac"
    "countId\030\003 \002(\005\022\014\n\004date\030\004 \002(\006\022\016\n\006amount\030\005 "
    "\002(\001\022\017\n\007isDebit\030\006 \002(\010\022\017\n\007isValid\030\007 \002(\010\"\035\n"
    "\tint_array\022\020\n\010theArray\030\001 \003(\005\"7\n\tuser_lis"
    "t\022*\n\007theList\030\001 \003(\0132\031.sample_bank_account"
    ".UserB-\n\037com.example.generated_by_protoc"
    "B\nBankProtos", 812);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bank.proto", &protobuf_RegisterTypes);
  User::default_instance_ = new User();
  User_Address::default_instance_ = new User_Address();
  Account::_default_description_ =
      new ::std::string("Checking account", 16);
  Account::default_instance_ = new Account();
  Account_Limits::default_instance_ = new Account_Limits();
  Transaction::default_instance_ = new Transaction();
  int_array::default_instance_ = new int_array();
  user_list::default_instance_ = new user_list();
  User::default_instance_->InitAsDefaultInstance();
  User_Address::default_instance_->InitAsDefaultInstance();
  Account::default_instance_->InitAsDefaultInstance();
  Account_Limits::default_instance_->InitAsDefaultInstance();
  Transaction::default_instance_->InitAsDefaultInstance();
  int_array::default_instance_->InitAsDefaultInstance();
  user_list::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bank_2eproto {
  StaticDescriptorInitializer_bank_2eproto() {
    protobuf_AddDesc_bank_2eproto();
  }
} static_descriptor_initializer_bank_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* User_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_Gender_descriptor_;
}
bool User_Gender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const User_Gender User::MALE;
const User_Gender User::FEMALE;
const User_Gender User::Gender_MIN;
const User_Gender User::Gender_MAX;
const int User::Gender_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int User_Address::kStreetFieldNumber;
const int User_Address::kPostCodeFieldNumber;
const int User_Address::kNumberFieldNumber;
#endif  // !_MSC_VER

User_Address::User_Address()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void User_Address::InitAsDefaultInstance() {
}

User_Address::User_Address(const User_Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void User_Address::SharedCtor() {
  _cached_size_ = 0;
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  postcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User_Address::~User_Address() {
  SharedDtor();
}

void User_Address::SharedDtor() {
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (postcode_ != &::google::protobuf::internal::kEmptyString) {
    delete postcode_;
  }
  if (this != default_instance_) {
  }
}

void User_Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User_Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_Address_descriptor_;
}

const User_Address& User_Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bank_2eproto();
  return *default_instance_;
}

User_Address* User_Address::default_instance_ = NULL;

User_Address* User_Address::New() const {
  return new User_Address;
}

void User_Address::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::kEmptyString) {
        street_->clear();
      }
    }
    if (has_postcode()) {
      if (postcode_ != &::google::protobuf::internal::kEmptyString) {
        postcode_->clear();
      }
    }
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User_Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string street = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_postCode;
        break;
      }

      // required string postCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postcode().data(), this->postcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // required int32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void User_Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string street = 1;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->street(), output);
  }

  // required string postCode = 2;
  if (has_postcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postcode().data(), this->postcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->postcode(), output);
  }

  // required int32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* User_Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string street = 1;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->street(), target);
  }

  // required string postCode = 2;
  if (has_postcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postcode().data(), this->postcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->postcode(), target);
  }

  // required int32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int User_Address::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string street = 1;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // required string postCode = 2;
    if (has_postcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postcode());
    }

    // required int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User_Address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User_Address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User_Address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User_Address::MergeFrom(const User_Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_postcode()) {
      set_postcode(from.postcode());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User_Address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_Address::CopyFrom(const User_Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void User_Address::Swap(User_Address* other) {
  if (other != this) {
    std::swap(street_, other->street_);
    std::swap(postcode_, other->postcode_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User_Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_Address_descriptor_;
  metadata.reflection = User_Address_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int User::kIdFieldNumber;
const int User::kAccountIdsFieldNumber;
const int User::kNameFieldNumber;
const int User::kSurnameFieldNumber;
const int User::kAddressesFieldNumber;
const int User::kAgeFieldNumber;
const int User::kGenderFieldNumber;
const int User::kNotesFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void User::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  surname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  age_ = 0;
  gender_ = 0;
  notes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  SharedDtor();
}

void User::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (surname_ != &::google::protobuf::internal::kEmptyString) {
    delete surname_;
  }
  if (notes_ != &::google::protobuf::internal::kEmptyString) {
    delete notes_;
  }
  if (this != default_instance_) {
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bank_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_surname()) {
      if (surname_ != &::google::protobuf::internal::kEmptyString) {
        surname_->clear();
      }
    }
    age_ = 0;
    gender_ = 0;
    if (has_notes()) {
      if (notes_ != &::google::protobuf::internal::kEmptyString) {
        notes_->clear();
      }
    }
  }
  accountids_.Clear();
  addresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountIds;
        break;
      }

      // repeated int32 accountIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_accountids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_accountids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountIds;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_surname;
        break;
      }

      // required string surname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_surname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->surname().data(), this->surname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_addresses;
        break;
      }

      // repeated .sample_bank_account.User.Address addresses = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addresses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_addresses;
        if (input->ExpectTag(48)) goto parse_age;
        break;
      }

      // optional int32 age = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender;
        break;
      }

      // optional .sample_bank_account.User.Gender gender = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sample_bank_account::User_Gender_IsValid(value)) {
            set_gender(static_cast< ::sample_bank_account::User_Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_notes;
        break;
      }

      // optional string notes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notes().data(), this->notes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 accountIds = 2;
  for (int i = 0; i < this->accountids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->accountids(i), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string surname = 4;
  if (has_surname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->surname().data(), this->surname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->surname(), output);
  }

  // repeated .sample_bank_account.User.Address addresses = 5;
  for (int i = 0; i < this->addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->addresses(i), output);
  }

  // optional int32 age = 6;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->age(), output);
  }

  // optional .sample_bank_account.User.Gender gender = 7;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->gender(), output);
  }

  // optional string notes = 8;
  if (has_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->notes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 accountIds = 2;
  for (int i = 0; i < this->accountids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->accountids(i), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string surname = 4;
  if (has_surname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->surname().data(), this->surname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->surname(), target);
  }

  // repeated .sample_bank_account.User.Address addresses = 5;
  for (int i = 0; i < this->addresses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->addresses(i), target);
  }

  // optional int32 age = 6;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->age(), target);
  }

  // optional .sample_bank_account.User.Gender gender = 7;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->gender(), target);
  }

  // optional string notes = 8;
  if (has_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->notes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string surname = 4;
    if (has_surname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->surname());
    }

    // optional int32 age = 6;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional .sample_bank_account.User.Gender gender = 7;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional string notes = 8;
    if (has_notes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notes());
    }

  }
  // repeated int32 accountIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->accountids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->accountids(i));
    }
    total_size += 1 * this->accountids_size() + data_size;
  }

  // repeated .sample_bank_account.User.Address addresses = 5;
  total_size += 1 * this->addresses_size();
  for (int i = 0; i < this->addresses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addresses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  accountids_.MergeFrom(from.accountids_);
  addresses_.MergeFrom(from.addresses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_surname()) {
      set_surname(from.surname());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_notes()) {
      set_notes(from.notes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  for (int i = 0; i < addresses_size(); i++) {
    if (!this->addresses(i).IsInitialized()) return false;
  }
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    accountids_.Swap(&other->accountids_);
    std::swap(name_, other->name_);
    std::swap(surname_, other->surname_);
    addresses_.Swap(&other->addresses_);
    std::swap(age_, other->age_);
    std::swap(gender_, other->gender_);
    std::swap(notes_, other->notes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Account_Limits::kMaxDailyLimitFieldNumber;
const int Account_Limits::kMaxTransactionLimitFieldNumber;
#endif  // !_MSC_VER

Account_Limits::Account_Limits()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Account_Limits::InitAsDefaultInstance() {
}

Account_Limits::Account_Limits(const Account_Limits& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Account_Limits::SharedCtor() {
  _cached_size_ = 0;
  maxdailylimit_ = 0;
  maxtransactionlimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account_Limits::~Account_Limits() {
  SharedDtor();
}

void Account_Limits::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Account_Limits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account_Limits::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account_Limits_descriptor_;
}

const Account_Limits& Account_Limits::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bank_2eproto();
  return *default_instance_;
}

Account_Limits* Account_Limits::default_instance_ = NULL;

Account_Limits* Account_Limits::New() const {
  return new Account_Limits;
}

void Account_Limits::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxdailylimit_ = 0;
    maxtransactionlimit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account_Limits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double maxDailyLimit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxdailylimit_)));
          set_has_maxdailylimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_maxTransactionLimit;
        break;
      }

      // optional double maxTransactionLimit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxTransactionLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxtransactionlimit_)));
          set_has_maxtransactionlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Account_Limits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double maxDailyLimit = 1;
  if (has_maxdailylimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->maxdailylimit(), output);
  }

  // optional double maxTransactionLimit = 2;
  if (has_maxtransactionlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maxtransactionlimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Account_Limits::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double maxDailyLimit = 1;
  if (has_maxdailylimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->maxdailylimit(), target);
  }

  // optional double maxTransactionLimit = 2;
  if (has_maxtransactionlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maxtransactionlimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Account_Limits::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double maxDailyLimit = 1;
    if (has_maxdailylimit()) {
      total_size += 1 + 8;
    }

    // optional double maxTransactionLimit = 2;
    if (has_maxtransactionlimit()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account_Limits::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account_Limits* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account_Limits*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account_Limits::MergeFrom(const Account_Limits& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxdailylimit()) {
      set_maxdailylimit(from.maxdailylimit());
    }
    if (from.has_maxtransactionlimit()) {
      set_maxtransactionlimit(from.maxtransactionlimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account_Limits::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account_Limits::CopyFrom(const Account_Limits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account_Limits::IsInitialized() const {

  return true;
}

void Account_Limits::Swap(Account_Limits* other) {
  if (other != this) {
    std::swap(maxdailylimit_, other->maxdailylimit_);
    std::swap(maxtransactionlimit_, other->maxtransactionlimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account_Limits::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account_Limits_descriptor_;
  metadata.reflection = Account_Limits_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Account::_default_description_ = NULL;
#ifndef _MSC_VER
const int Account::kIdFieldNumber;
const int Account::kDescriptionFieldNumber;
const int Account::kCreationDateFieldNumber;
const int Account::kLimitsFieldNumber;
const int Account::kBlurbFieldNumber;
#endif  // !_MSC_VER

Account::Account()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Account::InitAsDefaultInstance() {
  limits_ = const_cast< ::sample_bank_account::Account_Limits*>(&::sample_bank_account::Account_Limits::default_instance());
}

Account::Account(const Account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Account::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  description_ = const_cast< ::std::string*>(_default_description_);
  creationdate_ = GOOGLE_ULONGLONG(0);
  limits_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account::~Account() {
  SharedDtor();
}

void Account::SharedDtor() {
  if (description_ != _default_description_) {
    delete description_;
  }
  if (this != default_instance_) {
    delete limits_;
  }
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account_descriptor_;
}

const Account& Account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bank_2eproto();
  return *default_instance_;
}

Account* Account::default_instance_ = NULL;

Account* Account::New() const {
  return new Account;
}

void Account::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_description()) {
      if (description_ != _default_description_) {
        description_->assign(*_default_description_);
      }
    }
    creationdate_ = GOOGLE_ULONGLONG(0);
    if (has_limits()) {
      if (limits_ != NULL) limits_->::sample_bank_account::Account_Limits::Clear();
    }
  }
  blurb_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2 [default = "Checking account"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_creationDate;
        break;
      }

      // required fixed64 creationDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_creationDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &creationdate_)));
          set_has_creationdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_limits;
        break;
      }

      // optional .sample_bank_account.Account.Limits limits = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_blurb;
        break;
      }

      // repeated bytes blurb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blurb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_blurb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_blurb;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string description = 2 [default = "Checking account"];
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  // required fixed64 creationDate = 3;
  if (has_creationdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->creationdate(), output);
  }

  // optional .sample_bank_account.Account.Limits limits = 4;
  if (has_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->limits(), output);
  }

  // repeated bytes blurb = 5;
  for (int i = 0; i < this->blurb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->blurb(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string description = 2 [default = "Checking account"];
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // required fixed64 creationDate = 3;
  if (has_creationdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->creationdate(), target);
  }

  // optional .sample_bank_account.Account.Limits limits = 4;
  if (has_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->limits(), target);
  }

  // repeated bytes blurb = 5;
  for (int i = 0; i < this->blurb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->blurb(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string description = 2 [default = "Checking account"];
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required fixed64 creationDate = 3;
    if (has_creationdate()) {
      total_size += 1 + 8;
    }

    // optional .sample_bank_account.Account.Limits limits = 4;
    if (has_limits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limits());
    }

  }
  // repeated bytes blurb = 5;
  total_size += 1 * this->blurb_size();
  for (int i = 0; i < this->blurb_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->blurb(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  blurb_.MergeFrom(from.blurb_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_creationdate()) {
      set_creationdate(from.creationdate());
    }
    if (from.has_limits()) {
      mutable_limits()->::sample_bank_account::Account_Limits::MergeFrom(from.limits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Account::Swap(Account* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(description_, other->description_);
    std::swap(creationdate_, other->creationdate_);
    std::swap(limits_, other->limits_);
    blurb_.Swap(&other->blurb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account_descriptor_;
  metadata.reflection = Account_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Transaction::kIdFieldNumber;
const int Transaction::kDescriptionFieldNumber;
const int Transaction::kAccountIdFieldNumber;
const int Transaction::kDateFieldNumber;
const int Transaction::kAmountFieldNumber;
const int Transaction::kIsDebitFieldNumber;
const int Transaction::kIsValidFieldNumber;
#endif  // !_MSC_VER

Transaction::Transaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transaction::InitAsDefaultInstance() {
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transaction::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = 0;
  date_ = GOOGLE_ULONGLONG(0);
  amount_ = 0;
  isdebit_ = false;
  isvalid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transaction::~Transaction() {
  SharedDtor();
}

void Transaction::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_descriptor_;
}

const Transaction& Transaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bank_2eproto();
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New() const {
  return new Transaction;
}

void Transaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    accountid_ = 0;
    date_ = GOOGLE_ULONGLONG(0);
    amount_ = 0;
    isdebit_ = false;
    isvalid_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accountId;
        break;
      }

      // required int32 accountId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_date;
        break;
      }

      // required fixed64 date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_amount;
        break;
      }

      // required double amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isDebit;
        break;
      }

      // required bool isDebit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDebit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdebit_)));
          set_has_isdebit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isValid;
        break;
      }

      // required bool isValid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvalid_)));
          set_has_isvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  // required int32 accountId = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->accountid(), output);
  }

  // required fixed64 date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->date(), output);
  }

  // required double amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->amount(), output);
  }

  // required bool isDebit = 6;
  if (has_isdebit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isdebit(), output);
  }

  // required bool isValid = 7;
  if (has_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isvalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // required int32 accountId = 3;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->accountid(), target);
  }

  // required fixed64 date = 4;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->date(), target);
  }

  // required double amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->amount(), target);
  }

  // required bool isDebit = 6;
  if (has_isdebit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isdebit(), target);
  }

  // required bool isValid = 7;
  if (has_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isvalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required int32 accountId = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }

    // required fixed64 date = 4;
    if (has_date()) {
      total_size += 1 + 8;
    }

    // required double amount = 5;
    if (has_amount()) {
      total_size += 1 + 8;
    }

    // required bool isDebit = 6;
    if (has_isdebit()) {
      total_size += 1 + 1;
    }

    // required bool isValid = 7;
    if (has_isvalid()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_isdebit()) {
      set_isdebit(from.isdebit());
    }
    if (from.has_isvalid()) {
      set_isvalid(from.isvalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;

  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(description_, other->description_);
    std::swap(accountid_, other->accountid_);
    std::swap(date_, other->date_);
    std::swap(amount_, other->amount_);
    std::swap(isdebit_, other->isdebit_);
    std::swap(isvalid_, other->isvalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transaction_descriptor_;
  metadata.reflection = Transaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int int_array::kTheArrayFieldNumber;
#endif  // !_MSC_VER

int_array::int_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void int_array::InitAsDefaultInstance() {
}

int_array::int_array(const int_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void int_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

int_array::~int_array() {
  SharedDtor();
}

void int_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void int_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* int_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return int_array_descriptor_;
}

const int_array& int_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bank_2eproto();
  return *default_instance_;
}

int_array* int_array::default_instance_ = NULL;

int_array* int_array::New() const {
  return new int_array;
}

void int_array::Clear() {
  thearray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool int_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 theArray = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_theArray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_thearray())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_thearray())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_theArray;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void int_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 theArray = 1;
  for (int i = 0; i < this->thearray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->thearray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* int_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 theArray = 1;
  for (int i = 0; i < this->thearray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->thearray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int int_array::ByteSize() const {
  int total_size = 0;

  // repeated int32 theArray = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->thearray_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->thearray(i));
    }
    total_size += 1 * this->thearray_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void int_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const int_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const int_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void int_array::MergeFrom(const int_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  thearray_.MergeFrom(from.thearray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void int_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void int_array::CopyFrom(const int_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool int_array::IsInitialized() const {

  return true;
}

void int_array::Swap(int_array* other) {
  if (other != this) {
    thearray_.Swap(&other->thearray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata int_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = int_array_descriptor_;
  metadata.reflection = int_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_list::kTheListFieldNumber;
#endif  // !_MSC_VER

user_list::user_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_list::InitAsDefaultInstance() {
}

user_list::user_list(const user_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_list::~user_list() {
  SharedDtor();
}

void user_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_list_descriptor_;
}

const user_list& user_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bank_2eproto();
  return *default_instance_;
}

user_list* user_list::default_instance_ = NULL;

user_list* user_list::New() const {
  return new user_list;
}

void user_list::Clear() {
  thelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sample_bank_account.User theList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_theList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sample_bank_account.User theList = 1;
  for (int i = 0; i < this->thelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->thelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sample_bank_account.User theList = 1;
  for (int i = 0; i < this->thelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->thelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_list::ByteSize() const {
  int total_size = 0;

  // repeated .sample_bank_account.User theList = 1;
  total_size += 1 * this->thelist_size();
  for (int i = 0; i < this->thelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->thelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_list::MergeFrom(const user_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  thelist_.MergeFrom(from.thelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_list::CopyFrom(const user_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_list::IsInitialized() const {

  for (int i = 0; i < thelist_size(); i++) {
    if (!this->thelist(i).IsInitialized()) return false;
  }
  return true;
}

void user_list::Swap(user_list* other) {
  if (other != this) {
    thelist_.Swap(&other->thelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_list_descriptor_;
  metadata.reflection = user_list_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sample_bank_account

// @@protoc_insertion_point(global_scope)
