// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/infinispan/query/remote/client/query.proto

#ifndef PROTOBUF_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto__INCLUDED
#define PROTOBUF_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "org/infinispan/protostream/message-wrapping.pb.h"
#include "infinispan/hotrod/ImportExport.h"
// @@protoc_insertion_point(includes)

namespace org {
namespace infinispan {
namespace query {
namespace remote {
namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
void protobuf_AssignDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
void protobuf_ShutdownFile_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();

class HR_EXPORT QueryRequest;
class HR_EXPORT QueryRequest_NamedParameter;
class HR_EXPORT QueryResponse;
class HR_EXPORT FilterResult;
class HR_EXPORT ContinuousQueryResult;

// ===================================================================

class QueryRequest_NamedParameter : public ::google::protobuf::Message {
 public:
  QueryRequest_NamedParameter();
  virtual ~QueryRequest_NamedParameter();

  QueryRequest_NamedParameter(const QueryRequest_NamedParameter& from);

  inline QueryRequest_NamedParameter& operator=(const QueryRequest_NamedParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequest_NamedParameter& default_instance();

  void Swap(QueryRequest_NamedParameter* other);

  // implements Message ----------------------------------------------

  QueryRequest_NamedParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryRequest_NamedParameter& from);
  void MergeFrom(const QueryRequest_NamedParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .org.infinispan.protostream.WrappedMessage value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::org::infinispan::protostream::WrappedMessage& value() const;
  inline ::org::infinispan::protostream::WrappedMessage* mutable_value();
  inline ::org::infinispan::protostream::WrappedMessage* release_value();
  inline void set_allocated_value(::org::infinispan::protostream::WrappedMessage* value);

  // @@protoc_insertion_point(class_scope:org.infinispan.query.remote.client.QueryRequest.NamedParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::org::infinispan::protostream::WrappedMessage* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  friend void protobuf_AssignDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  friend void protobuf_ShutdownFile_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();

  void InitAsDefaultInstance();
  static QueryRequest_NamedParameter* default_instance_;
};
// -------------------------------------------------------------------

class QueryRequest : public ::google::protobuf::Message {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequest& default_instance();

  void Swap(QueryRequest* other);

  // implements Message ----------------------------------------------

  QueryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QueryRequest_NamedParameter NamedParameter;

  // accessors -------------------------------------------------------

  // required string jpqlString = 1;
  inline bool has_jpqlstring() const;
  inline void clear_jpqlstring();
  static const int kJpqlStringFieldNumber = 1;
  inline const ::std::string& jpqlstring() const;
  inline void set_jpqlstring(const ::std::string& value);
  inline void set_jpqlstring(const char* value);
  inline void set_jpqlstring(const char* value, size_t size);
  inline ::std::string* mutable_jpqlstring();
  inline ::std::string* release_jpqlstring();
  inline void set_allocated_jpqlstring(::std::string* jpqlstring);

  // optional int64 startOffset = 3;
  inline bool has_startoffset() const;
  inline void clear_startoffset();
  static const int kStartOffsetFieldNumber = 3;
  inline ::google::protobuf::int64 startoffset() const;
  inline void set_startoffset(::google::protobuf::int64 value);

  // optional int32 maxResults = 4;
  inline bool has_maxresults() const;
  inline void clear_maxresults();
  static const int kMaxResultsFieldNumber = 4;
  inline ::google::protobuf::int32 maxresults() const;
  inline void set_maxresults(::google::protobuf::int32 value);

  // repeated .org.infinispan.query.remote.client.QueryRequest.NamedParameter namedParameters = 5;
  inline int namedparameters_size() const;
  inline void clear_namedparameters();
  static const int kNamedParametersFieldNumber = 5;
  inline const ::org::infinispan::query::remote::client::QueryRequest_NamedParameter& namedparameters(int index) const;
  inline ::org::infinispan::query::remote::client::QueryRequest_NamedParameter* mutable_namedparameters(int index);
  inline ::org::infinispan::query::remote::client::QueryRequest_NamedParameter* add_namedparameters();
  inline const ::google::protobuf::RepeatedPtrField< ::org::infinispan::query::remote::client::QueryRequest_NamedParameter >&
      namedparameters() const;
  inline ::google::protobuf::RepeatedPtrField< ::org::infinispan::query::remote::client::QueryRequest_NamedParameter >*
      mutable_namedparameters();

  // @@protoc_insertion_point(class_scope:org.infinispan.query.remote.client.QueryRequest)
 private:
  inline void set_has_jpqlstring();
  inline void clear_has_jpqlstring();
  inline void set_has_startoffset();
  inline void clear_has_startoffset();
  inline void set_has_maxresults();
  inline void clear_has_maxresults();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* jpqlstring_;
  ::google::protobuf::int64 startoffset_;
  ::google::protobuf::RepeatedPtrField< ::org::infinispan::query::remote::client::QueryRequest_NamedParameter > namedparameters_;
  ::google::protobuf::int32 maxresults_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  friend void protobuf_AssignDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  friend void protobuf_ShutdownFile_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();

  void InitAsDefaultInstance();
  static QueryRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryResponse : public ::google::protobuf::Message {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse& default_instance();

  void Swap(QueryResponse* other);

  // implements Message ----------------------------------------------

  QueryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 numResults = 1;
  inline bool has_numresults() const;
  inline void clear_numresults();
  static const int kNumResultsFieldNumber = 1;
  inline ::google::protobuf::int32 numresults() const;
  inline void set_numresults(::google::protobuf::int32 value);

  // required int32 projectionSize = 2;
  inline bool has_projectionsize() const;
  inline void clear_projectionsize();
  static const int kProjectionSizeFieldNumber = 2;
  inline ::google::protobuf::int32 projectionsize() const;
  inline void set_projectionsize(::google::protobuf::int32 value);

  // repeated .org.infinispan.protostream.WrappedMessage results = 3;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 3;
  inline const ::org::infinispan::protostream::WrappedMessage& results(int index) const;
  inline ::org::infinispan::protostream::WrappedMessage* mutable_results(int index);
  inline ::org::infinispan::protostream::WrappedMessage* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >*
      mutable_results();

  // required int64 totalResults = 4;
  inline bool has_totalresults() const;
  inline void clear_totalresults();
  static const int kTotalResultsFieldNumber = 4;
  inline ::google::protobuf::int64 totalresults() const;
  inline void set_totalresults(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:org.infinispan.query.remote.client.QueryResponse)
 private:
  inline void set_has_numresults();
  inline void clear_has_numresults();
  inline void set_has_projectionsize();
  inline void clear_has_projectionsize();
  inline void set_has_totalresults();
  inline void clear_has_totalresults();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 numresults_;
  ::google::protobuf::int32 projectionsize_;
  ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage > results_;
  ::google::protobuf::int64 totalresults_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  friend void protobuf_AssignDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  friend void protobuf_ShutdownFile_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();

  void InitAsDefaultInstance();
  static QueryResponse* default_instance_;
};
// -------------------------------------------------------------------

class FilterResult : public ::google::protobuf::Message {
 public:
  FilterResult();
  virtual ~FilterResult();

  FilterResult(const FilterResult& from);

  inline FilterResult& operator=(const FilterResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterResult& default_instance();

  void Swap(FilterResult* other);

  // implements Message ----------------------------------------------

  FilterResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilterResult& from);
  void MergeFrom(const FilterResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes instance = 1;
  inline bool has_instance() const;
  inline void clear_instance();
  static const int kInstanceFieldNumber = 1;
  inline const ::std::string& instance() const;
  inline void set_instance(const ::std::string& value);
  inline void set_instance(const char* value);
  inline void set_instance(const void* value, size_t size);
  inline ::std::string* mutable_instance();
  inline ::std::string* release_instance();
  inline void set_allocated_instance(::std::string* instance);

  // repeated .org.infinispan.protostream.WrappedMessage projection = 2;
  inline int projection_size() const;
  inline void clear_projection();
  static const int kProjectionFieldNumber = 2;
  inline const ::org::infinispan::protostream::WrappedMessage& projection(int index) const;
  inline ::org::infinispan::protostream::WrappedMessage* mutable_projection(int index);
  inline ::org::infinispan::protostream::WrappedMessage* add_projection();
  inline const ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >&
      projection() const;
  inline ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >*
      mutable_projection();

  // repeated .org.infinispan.protostream.WrappedMessage sortProjection = 3;
  inline int sortprojection_size() const;
  inline void clear_sortprojection();
  static const int kSortProjectionFieldNumber = 3;
  inline const ::org::infinispan::protostream::WrappedMessage& sortprojection(int index) const;
  inline ::org::infinispan::protostream::WrappedMessage* mutable_sortprojection(int index);
  inline ::org::infinispan::protostream::WrappedMessage* add_sortprojection();
  inline const ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >&
      sortprojection() const;
  inline ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >*
      mutable_sortprojection();

  // @@protoc_insertion_point(class_scope:org.infinispan.query.remote.client.FilterResult)
 private:
  inline void set_has_instance();
  inline void clear_has_instance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* instance_;
  ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage > projection_;
  ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage > sortprojection_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  friend void protobuf_AssignDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  friend void protobuf_ShutdownFile_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();

  void InitAsDefaultInstance();
  static FilterResult* default_instance_;
};
// -------------------------------------------------------------------

class ContinuousQueryResult : public ::google::protobuf::Message {
 public:
  ContinuousQueryResult();
  virtual ~ContinuousQueryResult();

  ContinuousQueryResult(const ContinuousQueryResult& from);

  inline ContinuousQueryResult& operator=(const ContinuousQueryResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContinuousQueryResult& default_instance();

  void Swap(ContinuousQueryResult* other);

  // implements Message ----------------------------------------------

  ContinuousQueryResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContinuousQueryResult& from);
  void MergeFrom(const ContinuousQueryResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isJoining = 1;
  inline bool has_isjoining() const;
  inline void clear_isjoining();
  static const int kIsJoiningFieldNumber = 1;
  inline bool isjoining() const;
  inline void set_isjoining(bool value);

  // required bytes key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // repeated .org.infinispan.protostream.WrappedMessage projection = 4;
  inline int projection_size() const;
  inline void clear_projection();
  static const int kProjectionFieldNumber = 4;
  inline const ::org::infinispan::protostream::WrappedMessage& projection(int index) const;
  inline ::org::infinispan::protostream::WrappedMessage* mutable_projection(int index);
  inline ::org::infinispan::protostream::WrappedMessage* add_projection();
  inline const ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >&
      projection() const;
  inline ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >*
      mutable_projection();

  // @@protoc_insertion_point(class_scope:org.infinispan.query.remote.client.ContinuousQueryResult)
 private:
  inline void set_has_isjoining();
  inline void clear_has_isjoining();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;
  ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage > projection_;
  bool isjoining_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  friend void protobuf_AssignDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  friend void protobuf_ShutdownFile_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();

  void InitAsDefaultInstance();
  static ContinuousQueryResult* default_instance_;
};
// ===================================================================


// ===================================================================

// QueryRequest_NamedParameter

// required string name = 1;
inline bool QueryRequest_NamedParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryRequest_NamedParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryRequest_NamedParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryRequest_NamedParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& QueryRequest_NamedParameter::name() const {
  return *name_;
}
inline void QueryRequest_NamedParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void QueryRequest_NamedParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void QueryRequest_NamedParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryRequest_NamedParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* QueryRequest_NamedParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueryRequest_NamedParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .org.infinispan.protostream.WrappedMessage value = 2;
inline bool QueryRequest_NamedParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryRequest_NamedParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryRequest_NamedParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryRequest_NamedParameter::clear_value() {
  if (value_ != NULL) value_->::org::infinispan::protostream::WrappedMessage::Clear();
  clear_has_value();
}
inline const ::org::infinispan::protostream::WrappedMessage& QueryRequest_NamedParameter::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::org::infinispan::protostream::WrappedMessage* QueryRequest_NamedParameter::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::org::infinispan::protostream::WrappedMessage;
  return value_;
}
inline ::org::infinispan::protostream::WrappedMessage* QueryRequest_NamedParameter::release_value() {
  clear_has_value();
  ::org::infinispan::protostream::WrappedMessage* temp = value_;
  value_ = NULL;
  return temp;
}
inline void QueryRequest_NamedParameter::set_allocated_value(::org::infinispan::protostream::WrappedMessage* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
}

// -------------------------------------------------------------------

// QueryRequest

// required string jpqlString = 1;
inline bool QueryRequest::has_jpqlstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryRequest::set_has_jpqlstring() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryRequest::clear_has_jpqlstring() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryRequest::clear_jpqlstring() {
  if (jpqlstring_ != &::google::protobuf::internal::kEmptyString) {
    jpqlstring_->clear();
  }
  clear_has_jpqlstring();
}
inline const ::std::string& QueryRequest::jpqlstring() const {
  return *jpqlstring_;
}
inline void QueryRequest::set_jpqlstring(const ::std::string& value) {
  set_has_jpqlstring();
  if (jpqlstring_ == &::google::protobuf::internal::kEmptyString) {
    jpqlstring_ = new ::std::string;
  }
  jpqlstring_->assign(value);
}
inline void QueryRequest::set_jpqlstring(const char* value) {
  set_has_jpqlstring();
  if (jpqlstring_ == &::google::protobuf::internal::kEmptyString) {
    jpqlstring_ = new ::std::string;
  }
  jpqlstring_->assign(value);
}
inline void QueryRequest::set_jpqlstring(const char* value, size_t size) {
  set_has_jpqlstring();
  if (jpqlstring_ == &::google::protobuf::internal::kEmptyString) {
    jpqlstring_ = new ::std::string;
  }
  jpqlstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryRequest::mutable_jpqlstring() {
  set_has_jpqlstring();
  if (jpqlstring_ == &::google::protobuf::internal::kEmptyString) {
    jpqlstring_ = new ::std::string;
  }
  return jpqlstring_;
}
inline ::std::string* QueryRequest::release_jpqlstring() {
  clear_has_jpqlstring();
  if (jpqlstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jpqlstring_;
    jpqlstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueryRequest::set_allocated_jpqlstring(::std::string* jpqlstring) {
  if (jpqlstring_ != &::google::protobuf::internal::kEmptyString) {
    delete jpqlstring_;
  }
  if (jpqlstring) {
    set_has_jpqlstring();
    jpqlstring_ = jpqlstring;
  } else {
    clear_has_jpqlstring();
    jpqlstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 startOffset = 3;
inline bool QueryRequest::has_startoffset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryRequest::set_has_startoffset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryRequest::clear_has_startoffset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryRequest::clear_startoffset() {
  startoffset_ = GOOGLE_LONGLONG(0);
  clear_has_startoffset();
}
inline ::google::protobuf::int64 QueryRequest::startoffset() const {
  return startoffset_;
}
inline void QueryRequest::set_startoffset(::google::protobuf::int64 value) {
  set_has_startoffset();
  startoffset_ = value;
}

// optional int32 maxResults = 4;
inline bool QueryRequest::has_maxresults() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryRequest::set_has_maxresults() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryRequest::clear_has_maxresults() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryRequest::clear_maxresults() {
  maxresults_ = 0;
  clear_has_maxresults();
}
inline ::google::protobuf::int32 QueryRequest::maxresults() const {
  return maxresults_;
}
inline void QueryRequest::set_maxresults(::google::protobuf::int32 value) {
  set_has_maxresults();
  maxresults_ = value;
}

// repeated .org.infinispan.query.remote.client.QueryRequest.NamedParameter namedParameters = 5;
inline int QueryRequest::namedparameters_size() const {
  return namedparameters_.size();
}
inline void QueryRequest::clear_namedparameters() {
  namedparameters_.Clear();
}
inline const ::org::infinispan::query::remote::client::QueryRequest_NamedParameter& QueryRequest::namedparameters(int index) const {
  return namedparameters_.Get(index);
}
inline ::org::infinispan::query::remote::client::QueryRequest_NamedParameter* QueryRequest::mutable_namedparameters(int index) {
  return namedparameters_.Mutable(index);
}
inline ::org::infinispan::query::remote::client::QueryRequest_NamedParameter* QueryRequest::add_namedparameters() {
  return namedparameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::org::infinispan::query::remote::client::QueryRequest_NamedParameter >&
QueryRequest::namedparameters() const {
  return namedparameters_;
}
inline ::google::protobuf::RepeatedPtrField< ::org::infinispan::query::remote::client::QueryRequest_NamedParameter >*
QueryRequest::mutable_namedparameters() {
  return &namedparameters_;
}

// -------------------------------------------------------------------

// QueryResponse

// required int32 numResults = 1;
inline bool QueryResponse::has_numresults() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResponse::set_has_numresults() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResponse::clear_has_numresults() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResponse::clear_numresults() {
  numresults_ = 0;
  clear_has_numresults();
}
inline ::google::protobuf::int32 QueryResponse::numresults() const {
  return numresults_;
}
inline void QueryResponse::set_numresults(::google::protobuf::int32 value) {
  set_has_numresults();
  numresults_ = value;
}

// required int32 projectionSize = 2;
inline bool QueryResponse::has_projectionsize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryResponse::set_has_projectionsize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryResponse::clear_has_projectionsize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryResponse::clear_projectionsize() {
  projectionsize_ = 0;
  clear_has_projectionsize();
}
inline ::google::protobuf::int32 QueryResponse::projectionsize() const {
  return projectionsize_;
}
inline void QueryResponse::set_projectionsize(::google::protobuf::int32 value) {
  set_has_projectionsize();
  projectionsize_ = value;
}

// repeated .org.infinispan.protostream.WrappedMessage results = 3;
inline int QueryResponse::results_size() const {
  return results_.size();
}
inline void QueryResponse::clear_results() {
  results_.Clear();
}
inline const ::org::infinispan::protostream::WrappedMessage& QueryResponse::results(int index) const {
  return results_.Get(index);
}
inline ::org::infinispan::protostream::WrappedMessage* QueryResponse::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::org::infinispan::protostream::WrappedMessage* QueryResponse::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >&
QueryResponse::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >*
QueryResponse::mutable_results() {
  return &results_;
}

// required int64 totalResults = 4;
inline bool QueryResponse::has_totalresults() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryResponse::set_has_totalresults() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryResponse::clear_has_totalresults() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryResponse::clear_totalresults() {
  totalresults_ = GOOGLE_LONGLONG(0);
  clear_has_totalresults();
}
inline ::google::protobuf::int64 QueryResponse::totalresults() const {
  return totalresults_;
}
inline void QueryResponse::set_totalresults(::google::protobuf::int64 value) {
  set_has_totalresults();
  totalresults_ = value;
}

// -------------------------------------------------------------------

// FilterResult

// optional bytes instance = 1;
inline bool FilterResult::has_instance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilterResult::set_has_instance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilterResult::clear_has_instance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilterResult::clear_instance() {
  if (instance_ != &::google::protobuf::internal::kEmptyString) {
    instance_->clear();
  }
  clear_has_instance();
}
inline const ::std::string& FilterResult::instance() const {
  return *instance_;
}
inline void FilterResult::set_instance(const ::std::string& value) {
  set_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    instance_ = new ::std::string;
  }
  instance_->assign(value);
}
inline void FilterResult::set_instance(const char* value) {
  set_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    instance_ = new ::std::string;
  }
  instance_->assign(value);
}
inline void FilterResult::set_instance(const void* value, size_t size) {
  set_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    instance_ = new ::std::string;
  }
  instance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilterResult::mutable_instance() {
  set_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    instance_ = new ::std::string;
  }
  return instance_;
}
inline ::std::string* FilterResult::release_instance() {
  clear_has_instance();
  if (instance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instance_;
    instance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FilterResult::set_allocated_instance(::std::string* instance) {
  if (instance_ != &::google::protobuf::internal::kEmptyString) {
    delete instance_;
  }
  if (instance) {
    set_has_instance();
    instance_ = instance;
  } else {
    clear_has_instance();
    instance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .org.infinispan.protostream.WrappedMessage projection = 2;
inline int FilterResult::projection_size() const {
  return projection_.size();
}
inline void FilterResult::clear_projection() {
  projection_.Clear();
}
inline const ::org::infinispan::protostream::WrappedMessage& FilterResult::projection(int index) const {
  return projection_.Get(index);
}
inline ::org::infinispan::protostream::WrappedMessage* FilterResult::mutable_projection(int index) {
  return projection_.Mutable(index);
}
inline ::org::infinispan::protostream::WrappedMessage* FilterResult::add_projection() {
  return projection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >&
FilterResult::projection() const {
  return projection_;
}
inline ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >*
FilterResult::mutable_projection() {
  return &projection_;
}

// repeated .org.infinispan.protostream.WrappedMessage sortProjection = 3;
inline int FilterResult::sortprojection_size() const {
  return sortprojection_.size();
}
inline void FilterResult::clear_sortprojection() {
  sortprojection_.Clear();
}
inline const ::org::infinispan::protostream::WrappedMessage& FilterResult::sortprojection(int index) const {
  return sortprojection_.Get(index);
}
inline ::org::infinispan::protostream::WrappedMessage* FilterResult::mutable_sortprojection(int index) {
  return sortprojection_.Mutable(index);
}
inline ::org::infinispan::protostream::WrappedMessage* FilterResult::add_sortprojection() {
  return sortprojection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >&
FilterResult::sortprojection() const {
  return sortprojection_;
}
inline ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >*
FilterResult::mutable_sortprojection() {
  return &sortprojection_;
}

// -------------------------------------------------------------------

// ContinuousQueryResult

// required bool isJoining = 1;
inline bool ContinuousQueryResult::has_isjoining() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContinuousQueryResult::set_has_isjoining() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContinuousQueryResult::clear_has_isjoining() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContinuousQueryResult::clear_isjoining() {
  isjoining_ = false;
  clear_has_isjoining();
}
inline bool ContinuousQueryResult::isjoining() const {
  return isjoining_;
}
inline void ContinuousQueryResult::set_isjoining(bool value) {
  set_has_isjoining();
  isjoining_ = value;
}

// required bytes key = 2;
inline bool ContinuousQueryResult::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContinuousQueryResult::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContinuousQueryResult::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContinuousQueryResult::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ContinuousQueryResult::key() const {
  return *key_;
}
inline void ContinuousQueryResult::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ContinuousQueryResult::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ContinuousQueryResult::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContinuousQueryResult::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* ContinuousQueryResult::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContinuousQueryResult::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes value = 3;
inline bool ContinuousQueryResult::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContinuousQueryResult::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContinuousQueryResult::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContinuousQueryResult::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ContinuousQueryResult::value() const {
  return *value_;
}
inline void ContinuousQueryResult::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ContinuousQueryResult::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ContinuousQueryResult::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContinuousQueryResult::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* ContinuousQueryResult::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContinuousQueryResult::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .org.infinispan.protostream.WrappedMessage projection = 4;
inline int ContinuousQueryResult::projection_size() const {
  return projection_.size();
}
inline void ContinuousQueryResult::clear_projection() {
  projection_.Clear();
}
inline const ::org::infinispan::protostream::WrappedMessage& ContinuousQueryResult::projection(int index) const {
  return projection_.Get(index);
}
inline ::org::infinispan::protostream::WrappedMessage* ContinuousQueryResult::mutable_projection(int index) {
  return projection_.Mutable(index);
}
inline ::org::infinispan::protostream::WrappedMessage* ContinuousQueryResult::add_projection() {
  return projection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >&
ContinuousQueryResult::projection() const {
  return projection_;
}
inline ::google::protobuf::RepeatedPtrField< ::org::infinispan::protostream::WrappedMessage >*
ContinuousQueryResult::mutable_projection() {
  return &projection_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace remote
}  // namespace query
}  // namespace infinispan
}  // namespace org

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto__INCLUDED
