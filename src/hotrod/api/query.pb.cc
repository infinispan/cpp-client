// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/infinispan/query/remote/client/query.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "org/infinispan/query/remote/client/query.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace infinispan {
namespace query {
namespace remote {
namespace client {

namespace {

const ::google::protobuf::Descriptor* QueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryRequest_NamedParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryRequest_NamedParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContinuousQueryResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContinuousQueryResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto() {
  protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "org/infinispan/query/remote/client/query.proto");
  GOOGLE_CHECK(file != NULL);
  QueryRequest_descriptor_ = file->message_type(0);
  static const int QueryRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, jpqlstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, startoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, maxresults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, namedparameters_),
  };
  QueryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryRequest_descriptor_,
      QueryRequest::default_instance_,
      QueryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryRequest));
  QueryRequest_NamedParameter_descriptor_ = QueryRequest_descriptor_->nested_type(0);
  static const int QueryRequest_NamedParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest_NamedParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest_NamedParameter, value_),
  };
  QueryRequest_NamedParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryRequest_NamedParameter_descriptor_,
      QueryRequest_NamedParameter::default_instance_,
      QueryRequest_NamedParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest_NamedParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest_NamedParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryRequest_NamedParameter));
  QueryResponse_descriptor_ = file->message_type(1);
  static const int QueryResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, numresults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, projectionsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, totalresults_),
  };
  QueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResponse_descriptor_,
      QueryResponse::default_instance_,
      QueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResponse));
  FilterResult_descriptor_ = file->message_type(2);
  static const int FilterResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterResult, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterResult, projection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterResult, sortprojection_),
  };
  FilterResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilterResult_descriptor_,
      FilterResult::default_instance_,
      FilterResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilterResult));
  ContinuousQueryResult_descriptor_ = file->message_type(3);
  static const int ContinuousQueryResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousQueryResult, isjoining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousQueryResult, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousQueryResult, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousQueryResult, projection_),
  };
  ContinuousQueryResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContinuousQueryResult_descriptor_,
      ContinuousQueryResult::default_instance_,
      ContinuousQueryResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousQueryResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinuousQueryResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContinuousQueryResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryRequest_descriptor_, &QueryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryRequest_NamedParameter_descriptor_, &QueryRequest_NamedParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResponse_descriptor_, &QueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilterResult_descriptor_, &FilterResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContinuousQueryResult_descriptor_, &ContinuousQueryResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto() {
  delete QueryRequest::default_instance_;
  delete QueryRequest_reflection_;
  delete QueryRequest_NamedParameter::default_instance_;
  delete QueryRequest_NamedParameter_reflection_;
  delete QueryResponse::default_instance_;
  delete QueryResponse_reflection_;
  delete FilterResult::default_instance_;
  delete FilterResult_reflection_;
  delete ContinuousQueryResult::default_instance_;
  delete ContinuousQueryResult_reflection_;
}

void protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::org::infinispan::protostream::protobuf_AddDesc_org_2finfinispan_2fprotostream_2fmessage_2dwrapping_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.org/infinispan/query/remote/client/que"
    "ry.proto\022\"org.infinispan.query.remote.cl"
    "ient\0321org/infinispan/protostream/message"
    "-wrapping.proto\"\200\002\n\014QueryRequest\022\022\n\njpql"
    "String\030\001 \002(\t\022\023\n\013startOffset\030\003 \001(\003\022\022\n\nmax"
    "Results\030\004 \001(\005\022X\n\017namedParameters\030\005 \003(\0132\?"
    ".org.infinispan.query.remote.client.Quer"
    "yRequest.NamedParameter\032Y\n\016NamedParamete"
    "r\022\014\n\004name\030\001 \002(\t\0229\n\005value\030\002 \002(\0132*.org.inf"
    "inispan.protostream.WrappedMessage\"\216\001\n\rQ"
    "ueryResponse\022\022\n\nnumResults\030\001 \002(\005\022\026\n\016proj"
    "ectionSize\030\002 \002(\005\022;\n\007results\030\003 \003(\0132*.org."
    "infinispan.protostream.WrappedMessage\022\024\n"
    "\014totalResults\030\004 \002(\003\"\244\001\n\014FilterResult\022\020\n\010"
    "instance\030\001 \001(\014\022>\n\nprojection\030\002 \003(\0132*.org"
    ".infinispan.protostream.WrappedMessage\022B"
    "\n\016sortProjection\030\003 \003(\0132*.org.infinispan."
    "protostream.WrappedMessage\"\206\001\n\025Continuou"
    "sQueryResult\022\021\n\tisJoining\030\001 \002(\010\022\013\n\003key\030\002"
    " \002(\014\022\r\n\005value\030\003 \001(\014\022>\n\nprojection\030\004 \003(\0132"
    "*.org.infinispan.protostream.WrappedMess"
    "age", 843);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "org/infinispan/query/remote/client/query.proto", &protobuf_RegisterTypes);
  QueryRequest::default_instance_ = new QueryRequest();
  QueryRequest_NamedParameter::default_instance_ = new QueryRequest_NamedParameter();
  QueryResponse::default_instance_ = new QueryResponse();
  FilterResult::default_instance_ = new FilterResult();
  ContinuousQueryResult::default_instance_ = new ContinuousQueryResult();
  QueryRequest::default_instance_->InitAsDefaultInstance();
  QueryRequest_NamedParameter::default_instance_->InitAsDefaultInstance();
  QueryResponse::default_instance_->InitAsDefaultInstance();
  FilterResult::default_instance_->InitAsDefaultInstance();
  ContinuousQueryResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto {
  StaticDescriptorInitializer_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto() {
    protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  }
} static_descriptor_initializer_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QueryRequest_NamedParameter::kNameFieldNumber;
const int QueryRequest_NamedParameter::kValueFieldNumber;
#endif  // !_MSC_VER

QueryRequest_NamedParameter::QueryRequest_NamedParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryRequest_NamedParameter::InitAsDefaultInstance() {
  value_ = const_cast< ::org::infinispan::protostream::WrappedMessage*>(&::org::infinispan::protostream::WrappedMessage::default_instance());
}

QueryRequest_NamedParameter::QueryRequest_NamedParameter(const QueryRequest_NamedParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryRequest_NamedParameter::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRequest_NamedParameter::~QueryRequest_NamedParameter() {
  SharedDtor();
}

void QueryRequest_NamedParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void QueryRequest_NamedParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRequest_NamedParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryRequest_NamedParameter_descriptor_;
}

const QueryRequest_NamedParameter& QueryRequest_NamedParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  return *default_instance_;
}

QueryRequest_NamedParameter* QueryRequest_NamedParameter::default_instance_ = NULL;

QueryRequest_NamedParameter* QueryRequest_NamedParameter::New() const {
  return new QueryRequest_NamedParameter;
}

void QueryRequest_NamedParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::org::infinispan::protostream::WrappedMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryRequest_NamedParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .org.infinispan.protostream.WrappedMessage value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryRequest_NamedParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .org.infinispan.protostream.WrappedMessage value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryRequest_NamedParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .org.infinispan.protostream.WrappedMessage value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryRequest_NamedParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .org.infinispan.protostream.WrappedMessage value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRequest_NamedParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryRequest_NamedParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryRequest_NamedParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryRequest_NamedParameter::MergeFrom(const QueryRequest_NamedParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      mutable_value()->::org::infinispan::protostream::WrappedMessage::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryRequest_NamedParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRequest_NamedParameter::CopyFrom(const QueryRequest_NamedParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest_NamedParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QueryRequest_NamedParameter::Swap(QueryRequest_NamedParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryRequest_NamedParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryRequest_NamedParameter_descriptor_;
  metadata.reflection = QueryRequest_NamedParameter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryRequest::kJpqlStringFieldNumber;
const int QueryRequest::kStartOffsetFieldNumber;
const int QueryRequest::kMaxResultsFieldNumber;
const int QueryRequest::kNamedParametersFieldNumber;
#endif  // !_MSC_VER

QueryRequest::QueryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryRequest::InitAsDefaultInstance() {
}

QueryRequest::QueryRequest(const QueryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryRequest::SharedCtor() {
  _cached_size_ = 0;
  jpqlstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startoffset_ = GOOGLE_LONGLONG(0);
  maxresults_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRequest::~QueryRequest() {
  SharedDtor();
}

void QueryRequest::SharedDtor() {
  if (jpqlstring_ != &::google::protobuf::internal::kEmptyString) {
    delete jpqlstring_;
  }
  if (this != default_instance_) {
  }
}

void QueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryRequest_descriptor_;
}

const QueryRequest& QueryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  return *default_instance_;
}

QueryRequest* QueryRequest::default_instance_ = NULL;

QueryRequest* QueryRequest::New() const {
  return new QueryRequest;
}

void QueryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_jpqlstring()) {
      if (jpqlstring_ != &::google::protobuf::internal::kEmptyString) {
        jpqlstring_->clear();
      }
    }
    startoffset_ = GOOGLE_LONGLONG(0);
    maxresults_ = 0;
  }
  namedparameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string jpqlString = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jpqlstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jpqlstring().data(), this->jpqlstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startOffset;
        break;
      }

      // optional int64 startOffset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startoffset_)));
          set_has_startoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxResults;
        break;
      }

      // optional int32 maxResults = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxResults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxresults_)));
          set_has_maxresults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_namedParameters;
        break;
      }

      // repeated .org.infinispan.query.remote.client.QueryRequest.NamedParameter namedParameters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_namedParameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_namedparameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_namedParameters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string jpqlString = 1;
  if (has_jpqlstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jpqlstring().data(), this->jpqlstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->jpqlstring(), output);
  }

  // optional int64 startOffset = 3;
  if (has_startoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->startoffset(), output);
  }

  // optional int32 maxResults = 4;
  if (has_maxresults()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxresults(), output);
  }

  // repeated .org.infinispan.query.remote.client.QueryRequest.NamedParameter namedParameters = 5;
  for (int i = 0; i < this->namedparameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->namedparameters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string jpqlString = 1;
  if (has_jpqlstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jpqlstring().data(), this->jpqlstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->jpqlstring(), target);
  }

  // optional int64 startOffset = 3;
  if (has_startoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->startoffset(), target);
  }

  // optional int32 maxResults = 4;
  if (has_maxresults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxresults(), target);
  }

  // repeated .org.infinispan.query.remote.client.QueryRequest.NamedParameter namedParameters = 5;
  for (int i = 0; i < this->namedparameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->namedparameters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string jpqlString = 1;
    if (has_jpqlstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jpqlstring());
    }

    // optional int64 startOffset = 3;
    if (has_startoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->startoffset());
    }

    // optional int32 maxResults = 4;
    if (has_maxresults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxresults());
    }

  }
  // repeated .org.infinispan.query.remote.client.QueryRequest.NamedParameter namedParameters = 5;
  total_size += 1 * this->namedparameters_size();
  for (int i = 0; i < this->namedparameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->namedparameters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryRequest::MergeFrom(const QueryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  namedparameters_.MergeFrom(from.namedparameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jpqlstring()) {
      set_jpqlstring(from.jpqlstring());
    }
    if (from.has_startoffset()) {
      set_startoffset(from.startoffset());
    }
    if (from.has_maxresults()) {
      set_maxresults(from.maxresults());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < namedparameters_size(); i++) {
    if (!this->namedparameters(i).IsInitialized()) return false;
  }
  return true;
}

void QueryRequest::Swap(QueryRequest* other) {
  if (other != this) {
    std::swap(jpqlstring_, other->jpqlstring_);
    std::swap(startoffset_, other->startoffset_);
    std::swap(maxresults_, other->maxresults_);
    namedparameters_.Swap(&other->namedparameters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryRequest_descriptor_;
  metadata.reflection = QueryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryResponse::kNumResultsFieldNumber;
const int QueryResponse::kProjectionSizeFieldNumber;
const int QueryResponse::kResultsFieldNumber;
const int QueryResponse::kTotalResultsFieldNumber;
#endif  // !_MSC_VER

QueryResponse::QueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryResponse::InitAsDefaultInstance() {
}

QueryResponse::QueryResponse(const QueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryResponse::SharedCtor() {
  _cached_size_ = 0;
  numresults_ = 0;
  projectionsize_ = 0;
  totalresults_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResponse::~QueryResponse() {
  SharedDtor();
}

void QueryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResponse_descriptor_;
}

const QueryResponse& QueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  return *default_instance_;
}

QueryResponse* QueryResponse::default_instance_ = NULL;

QueryResponse* QueryResponse::New() const {
  return new QueryResponse;
}

void QueryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numresults_ = 0;
    projectionsize_ = 0;
    totalresults_ = GOOGLE_LONGLONG(0);
  }
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 numResults = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numresults_)));
          set_has_numresults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_projectionSize;
        break;
      }

      // required int32 projectionSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_projectionSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &projectionsize_)));
          set_has_projectionsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_results;
        break;
      }

      // repeated .org.infinispan.protostream.WrappedMessage results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_results;
        if (input->ExpectTag(32)) goto parse_totalResults;
        break;
      }

      // required int64 totalResults = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalResults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalresults_)));
          set_has_totalresults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 numResults = 1;
  if (has_numresults()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numresults(), output);
  }

  // required int32 projectionSize = 2;
  if (has_projectionsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->projectionsize(), output);
  }

  // repeated .org.infinispan.protostream.WrappedMessage results = 3;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->results(i), output);
  }

  // required int64 totalResults = 4;
  if (has_totalresults()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->totalresults(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 numResults = 1;
  if (has_numresults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numresults(), target);
  }

  // required int32 projectionSize = 2;
  if (has_projectionsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->projectionsize(), target);
  }

  // repeated .org.infinispan.protostream.WrappedMessage results = 3;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->results(i), target);
  }

  // required int64 totalResults = 4;
  if (has_totalresults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->totalresults(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 numResults = 1;
    if (has_numresults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numresults());
    }

    // required int32 projectionSize = 2;
    if (has_projectionsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->projectionsize());
    }

    // required int64 totalResults = 4;
    if (has_totalresults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalresults());
    }

  }
  // repeated .org.infinispan.protostream.WrappedMessage results = 3;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResponse::MergeFrom(const QueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numresults()) {
      set_numresults(from.numresults());
    }
    if (from.has_projectionsize()) {
      set_projectionsize(from.projectionsize());
    }
    if (from.has_totalresults()) {
      set_totalresults(from.totalresults());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponse::CopyFrom(const QueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void QueryResponse::Swap(QueryResponse* other) {
  if (other != this) {
    std::swap(numresults_, other->numresults_);
    std::swap(projectionsize_, other->projectionsize_);
    results_.Swap(&other->results_);
    std::swap(totalresults_, other->totalresults_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResponse_descriptor_;
  metadata.reflection = QueryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FilterResult::kInstanceFieldNumber;
const int FilterResult::kProjectionFieldNumber;
const int FilterResult::kSortProjectionFieldNumber;
#endif  // !_MSC_VER

FilterResult::FilterResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilterResult::InitAsDefaultInstance() {
}

FilterResult::FilterResult(const FilterResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilterResult::SharedCtor() {
  _cached_size_ = 0;
  instance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterResult::~FilterResult() {
  SharedDtor();
}

void FilterResult::SharedDtor() {
  if (instance_ != &::google::protobuf::internal::kEmptyString) {
    delete instance_;
  }
  if (this != default_instance_) {
  }
}

void FilterResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterResult_descriptor_;
}

const FilterResult& FilterResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  return *default_instance_;
}

FilterResult* FilterResult::default_instance_ = NULL;

FilterResult* FilterResult::New() const {
  return new FilterResult;
}

void FilterResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instance()) {
      if (instance_ != &::google::protobuf::internal::kEmptyString) {
        instance_->clear();
      }
    }
  }
  projection_.Clear();
  sortprojection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilterResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes instance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_instance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_projection;
        break;
      }

      // repeated .org.infinispan.protostream.WrappedMessage projection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_projection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_projection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_projection;
        if (input->ExpectTag(26)) goto parse_sortProjection;
        break;
      }

      // repeated .org.infinispan.protostream.WrappedMessage sortProjection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortProjection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sortprojection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortProjection;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilterResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes instance = 1;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->instance(), output);
  }

  // repeated .org.infinispan.protostream.WrappedMessage projection = 2;
  for (int i = 0; i < this->projection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->projection(i), output);
  }

  // repeated .org.infinispan.protostream.WrappedMessage sortProjection = 3;
  for (int i = 0; i < this->sortprojection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sortprojection(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilterResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes instance = 1;
  if (has_instance()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->instance(), target);
  }

  // repeated .org.infinispan.protostream.WrappedMessage projection = 2;
  for (int i = 0; i < this->projection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->projection(i), target);
  }

  // repeated .org.infinispan.protostream.WrappedMessage sortProjection = 3;
  for (int i = 0; i < this->sortprojection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sortprojection(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilterResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes instance = 1;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->instance());
    }

  }
  // repeated .org.infinispan.protostream.WrappedMessage projection = 2;
  total_size += 1 * this->projection_size();
  for (int i = 0; i < this->projection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->projection(i));
  }

  // repeated .org.infinispan.protostream.WrappedMessage sortProjection = 3;
  total_size += 1 * this->sortprojection_size();
  for (int i = 0; i < this->sortprojection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sortprojection(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilterResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilterResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilterResult::MergeFrom(const FilterResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  projection_.MergeFrom(from.projection_);
  sortprojection_.MergeFrom(from.sortprojection_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance()) {
      set_instance(from.instance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilterResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterResult::CopyFrom(const FilterResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterResult::IsInitialized() const {

  return true;
}

void FilterResult::Swap(FilterResult* other) {
  if (other != this) {
    std::swap(instance_, other->instance_);
    projection_.Swap(&other->projection_);
    sortprojection_.Swap(&other->sortprojection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilterResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterResult_descriptor_;
  metadata.reflection = FilterResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContinuousQueryResult::kIsJoiningFieldNumber;
const int ContinuousQueryResult::kKeyFieldNumber;
const int ContinuousQueryResult::kValueFieldNumber;
const int ContinuousQueryResult::kProjectionFieldNumber;
#endif  // !_MSC_VER

ContinuousQueryResult::ContinuousQueryResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContinuousQueryResult::InitAsDefaultInstance() {
}

ContinuousQueryResult::ContinuousQueryResult(const ContinuousQueryResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContinuousQueryResult::SharedCtor() {
  _cached_size_ = 0;
  isjoining_ = false;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContinuousQueryResult::~ContinuousQueryResult() {
  SharedDtor();
}

void ContinuousQueryResult::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ContinuousQueryResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContinuousQueryResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContinuousQueryResult_descriptor_;
}

const ContinuousQueryResult& ContinuousQueryResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_org_2finfinispan_2fquery_2fremote_2fclient_2fquery_2eproto();
  return *default_instance_;
}

ContinuousQueryResult* ContinuousQueryResult::default_instance_ = NULL;

ContinuousQueryResult* ContinuousQueryResult::New() const {
  return new ContinuousQueryResult;
}

void ContinuousQueryResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isjoining_ = false;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  projection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContinuousQueryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isJoining = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjoining_)));
          set_has_isjoining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_projection;
        break;
      }

      // repeated .org.infinispan.protostream.WrappedMessage projection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_projection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_projection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_projection;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContinuousQueryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isJoining = 1;
  if (has_isjoining()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isjoining(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(), output);
  }

  // repeated .org.infinispan.protostream.WrappedMessage projection = 4;
  for (int i = 0; i < this->projection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->projection(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContinuousQueryResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isJoining = 1;
  if (has_isjoining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isjoining(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // repeated .org.infinispan.protostream.WrappedMessage projection = 4;
  for (int i = 0; i < this->projection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->projection(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContinuousQueryResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isJoining = 1;
    if (has_isjoining()) {
      total_size += 1 + 1;
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  // repeated .org.infinispan.protostream.WrappedMessage projection = 4;
  total_size += 1 * this->projection_size();
  for (int i = 0; i < this->projection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->projection(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContinuousQueryResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContinuousQueryResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContinuousQueryResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContinuousQueryResult::MergeFrom(const ContinuousQueryResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  projection_.MergeFrom(from.projection_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isjoining()) {
      set_isjoining(from.isjoining());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContinuousQueryResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinuousQueryResult::CopyFrom(const ContinuousQueryResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinuousQueryResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ContinuousQueryResult::Swap(ContinuousQueryResult* other) {
  if (other != this) {
    std::swap(isjoining_, other->isjoining_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    projection_.Swap(&other->projection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContinuousQueryResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContinuousQueryResult_descriptor_;
  metadata.reflection = ContinuousQueryResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace remote
}  // namespace query
}  // namespace infinispan
}  // namespace org

// @@protoc_insertion_point(global_scope)
