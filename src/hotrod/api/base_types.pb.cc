// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: infinispan/hotrod/protobuf/base_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "infinispan/hotrod/protobuf/base_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace infinispan {
namespace hotrod {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* base_types_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  base_types_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_infinispan_2fhotrod_2fprotobuf_2fbase_5ftypes_2eproto() {
  protobuf_AddDesc_infinispan_2fhotrod_2fprotobuf_2fbase_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "infinispan/hotrod/protobuf/base_types.proto");
  GOOGLE_CHECK(file != NULL);
  base_types_descriptor_ = file->message_type(0);
  static const int base_types_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_types, i64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_types, i32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_types, str_),
  };
  base_types_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      base_types_descriptor_,
      base_types::default_instance_,
      base_types_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_types, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_types, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(base_types));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_infinispan_2fhotrod_2fprotobuf_2fbase_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    base_types_descriptor_, &base_types::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_infinispan_2fhotrod_2fprotobuf_2fbase_5ftypes_2eproto() {
  delete base_types::default_instance_;
  delete base_types_reflection_;
}

void protobuf_AddDesc_infinispan_2fhotrod_2fprotobuf_2fbase_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n+infinispan/hotrod/protobuf/base_types."
    "proto\022\032infinispan.hotrod.protobuf\"3\n\nbas"
    "e_types\022\013\n\003i64\030\003 \001(\003\022\013\n\003i32\030\005 \001(\005\022\013\n\003str"
    "\030\t \001(\t", 126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "infinispan/hotrod/protobuf/base_types.proto", &protobuf_RegisterTypes);
  base_types::default_instance_ = new base_types();
  base_types::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_infinispan_2fhotrod_2fprotobuf_2fbase_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_infinispan_2fhotrod_2fprotobuf_2fbase_5ftypes_2eproto {
  StaticDescriptorInitializer_infinispan_2fhotrod_2fprotobuf_2fbase_5ftypes_2eproto() {
    protobuf_AddDesc_infinispan_2fhotrod_2fprotobuf_2fbase_5ftypes_2eproto();
  }
} static_descriptor_initializer_infinispan_2fhotrod_2fprotobuf_2fbase_5ftypes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int base_types::kI64FieldNumber;
const int base_types::kI32FieldNumber;
const int base_types::kStrFieldNumber;
#endif  // !_MSC_VER

base_types::base_types()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void base_types::InitAsDefaultInstance() {
}

base_types::base_types(const base_types& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void base_types::SharedCtor() {
  _cached_size_ = 0;
  i64_ = GOOGLE_LONGLONG(0);
  i32_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

base_types::~base_types() {
  SharedDtor();
}

void base_types::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void base_types::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* base_types::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return base_types_descriptor_;
}

const base_types& base_types::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_infinispan_2fhotrod_2fprotobuf_2fbase_5ftypes_2eproto();
  return *default_instance_;
}

base_types* base_types::default_instance_ = NULL;

base_types* base_types::New() const {
  return new base_types;
}

void base_types::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    i64_ = GOOGLE_LONGLONG(0);
    i32_ = 0;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool base_types::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 i64 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i64_)));
          set_has_i64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_i32;
        break;
      }

      // optional int32 i32 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i32_)));
          set_has_i32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_str;
        break;
      }

      // optional string str = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void base_types::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 i64 = 3;
  if (has_i64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->i64(), output);
  }

  // optional int32 i32 = 5;
  if (has_i32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->i32(), output);
  }

  // optional string str = 9;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* base_types::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 i64 = 3;
  if (has_i64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->i64(), target);
  }

  // optional int32 i32 = 5;
  if (has_i32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->i32(), target);
  }

  // optional string str = 9;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int base_types::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 i64 = 3;
    if (has_i64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i64());
    }

    // optional int32 i32 = 5;
    if (has_i32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i32());
    }

    // optional string str = 9;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void base_types::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const base_types* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const base_types*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void base_types::MergeFrom(const base_types& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_i64()) {
      set_i64(from.i64());
    }
    if (from.has_i32()) {
      set_i32(from.i32());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void base_types::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void base_types::CopyFrom(const base_types& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool base_types::IsInitialized() const {

  return true;
}

void base_types::Swap(base_types* other) {
  if (other != this) {
    std::swap(i64_, other->i64_);
    std::swap(i32_, other->i32_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata base_types::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = base_types_descriptor_;
  metadata.reflection = base_types_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace hotrod
}  // namespace infinispan

// @@protoc_insertion_point(global_scope)
